#!/bin/sh

if [ "$SRB2SRVDEBUG" = 1 ]; then

    set -e -x

else

    set -e

fi

# Set environment variables.
if [ "$(uname)" = "Darwin" ]; then

    PRINTF="printf"

else

    PRINTF=$(which -a printf | gawk '/bin/ {print}' | head -n1)

fi

OS="$(uname)"
SRB2MSURL="https://ms.srb2.org"
SRB2KARTMSURL="https://ms.kartkrew.org:8860"
RINGRACERSMSURL="https://ms.kartkrew.org/list.json"
FAILURE="\e[1;91m"
NOTICE="\e[1;93m"
MESSAGE="\e[1;94m"
PROMPT="\e[1;4;97m"

# Killing script's process for quiting from hosting server.
if [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW32" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]; then

    trap "kill -9 $(ps -a | gawk '/bash/ {print $1}')" 2

else

    trap "kill -9 $(ps -a | gawk '/srb2srv/ {print $1}')" 2

fi

checklist() {
    # Giving user choice, if there needs to be more addons added or not.
    while

        clear
        $PRINTF "$PROMPT\n%s\n\e[0m" "Filelist:"
        $PRINTF "$NOTICE%s\n\e[0m" "$($PRINTF "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Do you want to add addons? Please choose by typing number and then pressing enter. Press enter or ctrl+c to quit."

        for loop in "Yes" "No"; do $PRINTF "%s\n" "$((i += 1))) $loop"; done

        $PRINTF "#? "
        read -r choose
    do

        unset i
        case $choose in

            "1")

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Please enter addons' absolute path for server."
                unset STRING
                read -r STRING

                FILELISTTMP="$($PRINTF "%s\n" "$STRING" | gawk '{gsub("~/","'$HOME'/"); print}')"
                FILELIST="$FILELISTTMP;$FILELIST"
                FILELIST=$(find $FILELIST -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')

                checklist
                break

                ;;

            "2")

                break

                ;;

            *)

                $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
                exit

                ;;

        esac

    done
}

checkport() {
    # Checking port entered by -p/--port option.
    $PRINTF "$NOTICE\n%s\n\e[0m" "Before running this, make sure that your server is up."

    if [ -n "$(curl -s "https://www.jameds.org/SRB2/port/?p=$PORT" | gawk '/is unreachable/')" ]; then

        curl -s "https://www.jameds.org/SRB2/port/?p=$PORT" | gawk '/<p class="ip">/,/<\/div>/ {split($0,a,"<"); print a[1]}' | gawk '{getline a; getline b; getline c; print "\033[7;31m"a""b" "c"\033[0m"}'

    else

        curl -s "https://www.jameds.org/SRB2/port/?p=$PORT" | gawk '/<p class="ip">/,/<\/div>/ {split($0,a,"<"); print a[1]}' | gawk 'NF{getline a; getline b; print "\033[7;32m"$0" "b"\033[0m"}'

    fi

}

checksrb2() {
    # Checking if valid executable was entered to SRB2 environment variable.
    if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

        SRB2="$SRB2"

    elif [ -z "$SRB2" ] || [ ! -f "$($PRINTF "%s\n" "$SRB2" | gawk -F';' '{gsub(" /",";/"); gsub(" \\\\",";\\\\"); gsub(" -",";-"); print $1}')" ]; then

        $PRINTF "$FAILURE\n%s\n\e[0m" "ERROR: No executable file found in SRB2 environment variable (\"lsdl2srb2\", \"lsdlsrb2\", \"srb2\", \"srb2win.exe\", \"srb2win64.exe\", \"srb2.exe\", \"Sonic Robo Blast 2\") or SRB2 environment variable is not set at all. Set valid path to executable file in SRB2 environment variable in shell configuration file (for example in \".bash_profile\" or \".bashrc\").

EXAMPLES:
         1. Linux:
            - export SRB2=\"\$HOME/Games/SRB2/lsdl2srb2\",
            - export SRB2=\"\$HOME/Games/SRB2/lsdlsrb2\",
            - export SRB2=\"\$HOME/Games/SRB2/srb2\",
            - export SRB2=\"/usr/local/bin/srb2\",
            - export SRB2=\"flatpak org.srb2.SRB2\".

         2. Windows:
            - export SRB2=\"\$HOME/Games/SRB2/srb2win.exe\",
            - export SRB2=\"\$HOME/Games/SRB2/srb2win64.exe\",
            - export SRB2=\"\$HOME/Games/SRB2/srb2.exe\",
            - export SRB2=\"C:\Users\user\Games\SRB2\srb2win.exe\".

         3. macOS:
            - export SRB2=\"/Applications/Sonic Robo Blast 2.app/Contents/MacOS/Sonic Robo Blast 2\"."

        exit

    else

        SRB2=$($PRINTF "%s\n" "$SRB2" | gawk '{gsub(" /",";/"); gsub(" \\\\",";\\\\"); gsub(" -",";-"); print}')

    fi
}

checksrb2kart() {
    # Checking if valid executable was entered to SRB2KART environment variable.
    if [ "$($PRINTF "%s\n" "$SRB2KART" | gawk '{print $1}')" = "flatpak" ]; then

        SRB2KART="$SRB2KART"

    elif [ -z "$SRB2KART" ] || [ ! -f "$($PRINTF "%s\n" "$SRB2KART" | gawk -F';' '{gsub(" /",";/"); gsub(" \\\\",";\\\\"); gsub(" -",";-"); print $1}')" ]; then

        $PRINTF "$FAILURE\n%s\n\e[0m" "ERROR: No executable file found in SRB2Kart environment variable (\"lsdl2srb2kart\", \"srb2kart\", \"srb2kart.exe\", \"Sonic Robo Blast 2 Kart\") or SRB2Kart environment variable is not set at all. Set valid path to executable file in SRB2Kart environment variable in shell configuration file (for example in \".bash_profile\" or \".bashrc\").

EXAMPLES:
         1. Linux:
            - export SRB2KART=\"\$HOME/Games/SRB2Kart/lsdl2srb2kart\",
            - export SRB2KART=\"\$HOME/Games/SRB2Kart/srb2kart\",
            - export SRB2KART=\"/usr/local/bin/srb2kart\",
            - export SRB2KART=\"flatpak org.srb2.SRB2Kart\".

         2. Windows:
            - export SRB2KART=\"\$HOME/Games/SRB2Kart/srb2kart.exe\",
            - export SRB2KART=\"C:\Users\user\Games\SRB2Kart\srb2kart.exe\".

         3. macOS:
            - export SRB2KART=\"/Applications/Sonic Robo Blast 2 Kart.app/Contents/MacOS/Sonic Robo Blast 2 Kart\"."

        exit

    else

        SRB2KART=$($PRINTF "%s\n" "$SRB2KART" | gawk '{gsub(" /",";/"); gsub(" \\\\",";\\\\"); gsub(" -",";-"); print}')

    fi
}

checkringracers() {
    # Checking if valid executable was entered to Ring Racers environment variable.
    if [ "$($PRINTF "%s\n" "$RINGRACERS" | gawk '{print $1}')" = "flatpak" ]; then

        RINGRACERS="$RINGRACERS"

    elif [ -z "$RINGRACERS" ] || [ ! -f "$($PRINTF "%s\n" "$RINGRACERS" | gawk -F';' '{gsub(" /",";/"); gsub(" \\\\",";\\\\"); gsub(" -",";-"); print $1}')" ]; then

        $PRINTF "$FAILURE\n%s\n\e[0m" "ERROR: No executable file found in Ring Racers environment variable (\"ringracers\", \"ringracers.exe\", \"Ring Racers\") environment variable is not set at all. Set valid path to executable file in Ring Racers environment variable in shell configuration file (for example in \".bash_profile\" or \".bashrc\").

EXAMPLES:
         1. Linux:
            - export RINGRACERS=\"\$HOME/Games/RingRacers/ringracers\",
            - export RINGRACERS=\"\$HOME/Games/RingRacers/ringracers\",
            - export RINGRACERS=\"/usr/local/bin/ringracers\",
            - export RINGRACERS=\"flatpak org.kartkrew.RingRacers\".

         2. Windows:
            - export RINGRACERS=\"\$HOME/Games/RingRacers/ringracers.exe\",
            - export RINGRACERS=\"C:\Users\user\Games\RingRacers\ringracers.exe\".

         3. macOS:
            - export RINGRACERS=\"/Applications/Ring Racers.app/Contents/MacOS/Ring Racers\"."

        exit

    else

        RINGRACERS=$($PRINTF "%s\n" "$RINGRACERS" | gawk '{gsub(" /",";/"); gsub(" \\\\",";\\\\"); gsub(" -",";-"); print}')

    fi
}

dedicated() {
    # Hosting dedicated server for SRB2. Checking which slashes in addons' paths where entered to determine OS and how the script should act to remove unnecessary arguments to find addons.
    IFS=";"

    if [ -n "$($PRINTF "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')" ]; then

        SLASHARG=$($PRINTF "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')

    else

        SLASHARG=$($PRINTF "%s\n" "$*" | gawk 'match($0, /\//) {print substr($0, RSTART, RLENGTH)}')

    fi

    checksrb2

    if ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$1" = "-d" ] || [ "$1" = "--dedicated" ]); then

        PATHARGS=$($PRINTF "%s" "$*" | gawk '{gsub("-d;|--dedicated;|;-p;[0-9][0-9]*|;--port;[0-9][0-9]*|-p;[0-9][0-9]*;|--port;[0-9][0-9]*;",""); gsub("~/","'$HOME'/"); print}')

        FILELIST=$(find $PATHARGS -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')

    elif ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$3" = "-d" ] || [ "$3" = "--dedicated" ]); then

        shift 3

        FILELIST=$(find "$@" -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')

    else

        checklist

    fi

    while

        # Setting config file for server.
        if [ -n "$SRB2CFG" ] && [ -s "$SRB2CFG" ]; then

            TEMPFILE=$(mktemp)
            {
                cat "$SRB2MAINCFG"
                $PRINTF "\n"
                cat "$SRB2CFG"
            } > "$TEMPFILE"
            set -- -config "$TEMPFILE"

        elif [ -n "$SRB2MAINCFG" ] && [ -s "$SRB2MAINCFG" ]; then

            set -- -config "$SRB2MAINCFG"

        else

            set --

        fi

        clear
        $PRINTF "$PROMPT\n%s\n\e[0m" "Filelist:"
        $PRINTF "$NOTICE%s\n\e[0m" "$($PRINTF "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Do you want to advertise/list your server to Master Server? Please choose by typing number and then pressing enter. Press enter or ctrl+c to quit."

        for loop in "Yes" "No"; do $PRINTF "%s\n" "$((i += 1))) $loop"; done

        $PRINTF "#? "
        read -r choose
    do

        unset i
        case $choose in

            "1")

                while

                    $PRINTF "$MESSAGE\n%s\n\e[0m" "Please choose by typing number and then pressing enter. Press enter or ctrl+c to quit."

                    for loop in "Standard" "Casual" "Custom"; do $PRINTF "%s\n" "$((i += 1))) $loop"; done

                    $PRINTF "#? "
                    read -r choose
                do

                    unset i
                    case $choose in

                        "1")

                            $PRINTF "\n"

                            # Unsetting DISPLAY for a purpose of suppressing any message popups.
                            unset DISPLAY

                            # Standard room.
                            if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                                flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -dedicated "$@" -room 33 -port $PORT -file $FILELIST 2>&1

                            else

                                $SRB2 -dedicated "$@" -room 33 -port $PORT -file $FILELIST 2>&1

                            fi

                            SRB2PID="$!"

                            # Restarting server from loop when there is error within game.
                            if [ -z "$NOSRB2SRVLOOP" ] || [ "$NOSRB2SRVLOOP" = 0 ]; then

                                while true; do

                                    sleep 5

                                    if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                                        clear
                                        $PRINTF "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                                        i=10
                                        while [ $i -le 10 ] && [ $i -gt 0 ]; do

                                            tput cup 4 $l
                                            i=$((i - 1))
                                            $PRINTF "%s\n" "$i"
                                            sleep 1

                                        done

                                        if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                                            flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -dedicated "$@" -room 33 -port $PORT -file $FILELIST 2>&1

                                        else

                                            $SRB2 -dedicated "$@" -room 33 -port $PORT -file $FILELIST 2>&1

                                        fi

                                        SRB2PID="$!"

                                    fi

                                done

                            fi
                            break

                            ;;

                        "2")

                            $PRINTF "\n"

                            # Unsetting DISPLAY for a purpose of suppressing any message popups.
                            unset DISPLAY

                            # Casual room.
                            if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                                flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -dedicated "$@" -room 28 -port $PORT -file $FILELIST 2>&1

                            else

                                $SRB2 -dedicated "$@" -room 28 -port $PORT -file $FILELIST 2>&1

                            fi

                            SRB2PID="$!"

                            # Restarting server from loop when there is error within game.
                            if [ -z "$NOSRB2SRVLOOP" ] || [ "$NOSRB2SRVLOOP" = 0 ]; then

                                while true; do

                                    sleep 5

                                    if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                                        clear
                                        $PRINTF "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                                        i=10
                                        while [ $i -le 10 ] && [ $i -gt 0 ]; do

                                            tput cup 4 $l
                                            i=$((i - 1))
                                            $PRINTF "%s\n" "$i"
                                            sleep 1

                                        done

                                        if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                                            flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -dedicated "$@" -room 28 -port $PORT -file $FILELIST 2>&1

                                        else

                                            $SRB2 -dedicated "$@" -room 28 -port $PORT -file $FILELIST 2>&1

                                        fi

                                        SRB2PID="$!"

                                    fi

                                done

                            fi
                            break

                            ;;

                        "3")

                            $PRINTF "\n"

                            # Unsetting DISPLAY for a purpose of suppressing any message popups.
                            unset DISPLAY

                            # Custom room.
                            if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                                flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -dedicated "$@" -room 38 -port $PORT -file $FILELIST 2>&1

                            else

                                $SRB2 -dedicated "$@" -room 38 -port $PORT -file $FILELIST 2>&1

                            fi

                            SRB2PID="$!"

                            # Restarting server from loop when there is error within game.
                            if [ -z "$NOSRB2SRVLOOP" ] || [ "$NOSRB2SRVLOOP" = 0 ]; then

                                while true; do

                                    sleep 5

                                    if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                                        clear
                                        $PRINTF "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                                        i=10
                                        while [ $i -le 10 ] && [ $i -gt 0 ]; do

                                            tput cup 4 $l
                                            i=$((i - 1))
                                            $PRINTF "%s\n" "$i"
                                            sleep 1

                                        done

                                        if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                                            flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -dedicated "$@" -room 38 -port $PORT -file $FILELIST 2>&1

                                        else

                                            $SRB2 -dedicated "$@" -room 38 -port $PORT -file $FILELIST 2>&1

                                        fi

                                        SRB2PID="$!"

                                    fi

                                done

                            fi
                            break

                            ;;

                        *)

                            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
                            exit

                            ;;

                    esac

                done
                break

                ;;

            "2")

                $PRINTF "\n"

                # Unsetting DISPLAY for a purpose of suppressing any message popups.
                unset DISPLAY

                # Unlisted server.
                if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                    flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -dedicated "$@" -port $PORT -file $FILELIST 2>&1

                else

                    $SRB2 -dedicated "$@" -port $PORT -file $FILELIST 2>&1

                fi

                SRB2PID="$!"

                # Restarting server from loop when there is error within game.
                if [ -z "$NOSRB2SRVLOOP" ] || [ "$NOSRB2SRVLOOP" = 0 ]; then

                    while true; do

                        sleep 5

                        if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                            clear
                            $PRINTF "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                            i=10
                            while [ $i -le 10 ] && [ $i -gt 0 ]; do

                                tput cup 4 $l
                                i=$((i - 1))
                                $PRINTF "%s\n" "$i"
                                sleep 1

                            done

                            if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                                flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -dedicated "$@" -port $PORT -file $FILELIST 2>&1

                            else

                                $SRB2 -dedicated "$@" -port $PORT -file $FILELIST 2>&1

                            fi

                            SRB2PID="$!"

                        fi

                    done

                fi
                break

                ;;

            *)

                $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
                exit

                ;;

        esac

    done
}

dedicatedkart() {
    # Hosting dedicated server for SRB2Kart. Checking which slashes in addons' paths where entered to determine OS and how the script should act to remove unnecessary arguments to find addons.
    IFS=";"

    if [ -n "$($PRINTF "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')" ]; then

        SLASHARG=$($PRINTF "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')

    else

        SLASHARG=$($PRINTF "%s\n" "$*" | gawk 'match($0, /\//) {print substr($0, RSTART, RLENGTH)}')

    fi

    checksrb2kart

    if ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$1" = "-dk" ] || [ "$1" = "--dedicatedkart" ]); then

        PATHARGS=$($PRINTF "%s" "$*" | gawk '{gsub("-dk;|--dedicatedkart;|;-p;[0-9][0-9]*|;--port;[0-9][0-9]*|-p;[0-9][0-9]*;|--port;[0-9][0-9]*;",""); gsub("~/","'$HOME'/"); print}')
        FILELIST=$(find $PATHARGS -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')
        clear
        $PRINTF "$PROMPT\n%s\n\e[0m" "Filelist:"
        $PRINTF "$NOTICE%s\n\e[0m" "$($PRINTF "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"

    elif ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$3" = "-dk" ] || [ "$3" = "--dedicatedkart" ]); then

        shift 3
        FILELIST=$(find "$@" -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')
        clear
        $PRINTF "$PROMPT\n%s\n\e[0m" "Filelist:"
        $PRINTF "$NOTICE%s\n\e[0m" "$($PRINTF "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"

    else

        checklist

    fi

    # Setting config file for server.
    if [ -n "$SRB2KARTCFG" ] && [ -s "$SRB2KARTCFG" ]; then

        TEMPFILE=$(mktemp)
        {
            cat "$SRB2KARTMAINCFG"
            $PRINTF "\n"
            cat "$SRB2KARTCFG"
        } > "$TEMPFILE"
        set -- -config "$TEMPFILE"

    elif [ -n "$SRB2KARTMAINCFG" ] && [ -s "$SRB2KARTMAINCFG" ]; then

        set -- -config "$SRB2KARTMAINCFG"

    else

        set --

    fi

    $PRINTF "$NOTICE\n%s\n\e[0m" "Remember to type 'advertise 1' in console to advertise to Master Server."
    sleep 1
    unset DISPLAY

    if [ "$($PRINTF "%s\n" "$SRB2KART" | gawk '{print $1}')" = "flatpak" ]; then

        flatpak run $($PRINTF "%s\n" "$SRB2KART" | gawk '{print $NF}') -dedicated "$@" -port $PORT -file $FILELIST 2>&1

    else

        $SRB2KART -dedicated "$@" -port $PORT -file $FILELIST 2>&1

    fi

    SRB2PID="$!"

    # Restarting server from loop when there is error within game.
    if [ -z "$NOSRB2SRVLOOP" ] || [ "$NOSRB2SRVLOOP" = 0 ]; then

        while true; do

            sleep 5

            if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                clear
                $PRINTF "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                i=10
                while [ $i -le 10 ] && [ $i -gt 0 ]; do

                    tput cup 4 $l
                    i=$((i - 1))
                    $PRINTF "%s\n" "$i"
                    sleep 1

                done

                if [ "$($PRINTF "%s\n" "$SRB2KART" | gawk '{print $1}')" = "flatpak" ]; then

                    flatpak run $($PRINTF "%s\n" "$SRB2KART" | gawk '{print $NF}') -dedicated "$@" -port $PORT -file $FILELIST 2>&1

                else

                    $SRB2KART -dedicated "$@" -port $PORT -file $FILELIST 2>&1

                fi

                SRB2PID="$!"

            fi

        done

    fi
}

dedicatedringracers() {
    # Hosting dedicated server for Ring Racers. Checking which slashes in addons' paths where entered to determine OS and how the script should act to remove unnecessary arguments to find addons.
    IFS=";"

    if [ -n "$($PRINTF "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')" ]; then

        SLASHARG=$($PRINTF "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')

    else

        SLASHARG=$($PRINTF "%s\n" "$*" | gawk 'match($0, /\//) {print substr($0, RSTART, RLENGTH)}')

    fi

    checkringracers

    if ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$1" = "-dr" ] || [ "$1" = "--dedicatedringracers" ]); then

        PATHARGS=$($PRINTF "%s" "$*" | gawk '{gsub("-dr;|--dedicatedringracers;|;-p;[0-9][0-9]*|;--port;[0-9][0-9]*|-p;[0-9][0-9]*;|--port;[0-9][0-9]*;",""); gsub("~/","'$HOME'/"); print}')
        FILELIST=$(find $PATHARGS -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')
        clear
        $PRINTF "$PROMPT\n%s\n\e[0m" "Filelist:"
        $PRINTF "$NOTICE%s\n\e[0m" "$($PRINTF "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"

    elif ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$3" = "-dr" ] || [ "$3" = "--dedicatedringracers" ]); then

        shift 3
        FILELIST=$(find "$@" -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')
        clear
        $PRINTF "$PROMPT\n%s\n\e[0m" "Filelist:"
        $PRINTF "$NOTICE%s\n\e[0m" "$($PRINTF "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"

    else

        checklist

    fi

    # Setting config file for server.
    if [ -n "$RINGRACERSCFG" ] && [ -s "$RINGRACERSCFG" ]; then

        TEMPFILE=$(mktemp)
        {
            cat "$RINGRACERSMAINCFG"
            $PRINTF "\n"
            cat "$RINGRACERSCFG"
        } > "$TEMPFILE"
        set -- -config "$TEMPFILE"

    elif [ -n "$RINGRACERSMAINCFG" ] && [ -s "$RINGRACERSMAINCFG" ]; then

        set -- -config "$RINGRACERSMAINCFG"

    else

        set --

    fi

    $PRINTF "$NOTICE\n%s\n\e[0m" "Remember to type 'advertise 1' in console to advertise to Master Server."
    sleep 1
    unset DISPLAY

    if [ "$($PRINTF "%s\n" "$RINGRACERS" | gawk '{print $1}')" = "flatpak" ]; then

        flatpak run $($PRINTF "%s\n" "$RINGRACERS" | gawk '{print $NF}') -dedicated "$@" -port $PORT -file $FILELIST 2>&1

    else

        $RINGRACERS -noexchndl -dedicated "$@" -port $PORT -file $FILELIST 2>&1

    fi

    SRB2PID="$!"

    # Restarting server from loop when there is error within game.
    if [ -z "$NOSRB2SRVLOOP" ] || [ "$NOSRB2SRVLOOP" = 0 ]; then

        while true; do

            sleep 5

            if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                clear
                $PRINTF "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                i=10
                while [ $i -le 10 ] && [ $i -gt 0 ]; do

                    tput cup 4 $l
                    i=$((i - 1))
                    $PRINTF "%s\n" "$i"
                    sleep 1

                done

                if [ "$($PRINTF "%s\n" "$RINGRACERS" | gawk '{print $1}')" = "flatpak" ]; then

                    flatpak run $($PRINTF "%s\n" "$RINGRACERS" | gawk '{print $NF}') -dedicated "$@" -port $PORT -file $FILELIST 2>&1

                else

                    $RINGRACERS -noexchndl -dedicated "$@" -port $PORT -file $FILELIST 2>&1

                fi

                SRB2PID="$!"

            fi

        done

    fi
}

ip() {
    IFS=";"
    SRB2=$($PRINTF "%s\n" "$SRB2" | gawk '{gsub(" /",";/"); gsub(" -",";-"); print}')

    checksrb2
    $PRINTF "$MESSAGE\n%s\n\e[0m" "Connecting to server $2."
    sleep 1

    if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

        flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -connect $2 2>&1 || checksrb2

    else

        $SRB2 -connect $2 2>&1 || checksrb2

    fi
}

ipkart() {
    IFS=";"
    SRB2KART=$($PRINTF "%s\n" "$SRB2KART" | gawk '{gsub(" /",";/"); gsub(" -",";-"); print}')

    checksrb2kart
    $PRINTF "$MESSAGE\n%s\n\e[0m" "Connecting to server $2."
    sleep 1

    if [ "$($PRINTF "%s\n" "$SRB2KART" | gawk '{print $1}')" = "flatpak" ]; then

        flatpak run $($PRINTF "%s\n" "$SRB2KART" | gawk '{print $NF}') -connect $2 2>&1 || checksrb2kart

    else

        $SRB2KART -connect $2 2>&1 || checksrb2kart

    fi
}

ipringracers() {
    IFS=";"
    RINGRACERS=$($PRINTF "%s\n" "$RINGRACERS" | gawk '{gsub(" /",";/"); gsub(" -",";-"); print}')

    checkringracers
    $PRINTF "$MESSAGE\n%s\n\e[0m" "Connecting to server $2."
    sleep 1

    if [ "$($PRINTF "%s\n" "$RINGRACERS" | gawk '{print $1}')" = "flatpak" ]; then

        flatpak run $($PRINTF "%s\n" "$RINGRACERS" | gawk '{print $NF}') -connect $2 2>&1 || checkringracers

    else

        $RINGRACERS -noexchndl -connect $2 2>&1 || checkringracers

    fi
}

server() {
    # Hosting server for SRB2. Checking which slashes in addons' paths where entered to determine OS and how the script should act to remove unnecessary arguments to find addons.
    IFS=";"

    if [ -n "$($PRINTF "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')" ]; then

        SLASHARG=$($PRINTF "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')

    else

        SLASHARG=$($PRINTF "%s\n" "$*" | gawk 'match($0, /\//) {print substr($0, RSTART, RLENGTH)}')

    fi

    checksrb2

    if ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$1" = "-s" ] || [ "$1" = "--server" ]); then

        PATHARGS=$($PRINTF "%s" "$*" | gawk '{gsub("-s;|--server;|;-p;[0-9][0-9]*|;--port;[0-9][0-9]*|-p;[0-9][0-9]*;|--port;[0-9][0-9]*;",""); gsub("~/","'$HOME'/"); print}')
        FILELIST=$(find $PATHARGS -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')

    elif ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$3" = "-s" ] || [ "$3" = "--server" ]); then

        shift 3
        FILELIST=$(find "$@" -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')

    else

        checklist

    fi

    while

        # Setting config file for server.
        if [ -n "$SRB2CFG" ] && [ -s "$SRB2CFG" ]; then

            TEMPFILE=$(mktemp)
            {
                cat "$SRB2MAINCFG"
                $PRINTF "\n"
                cat "$SRB2CFG"
            } > "$TEMPFILE"
            set -- -config "$TEMPFILE"

        elif [ -n "$SRB2MAINCFG" ] && [ -s "$SRB2MAINCFG" ]; then

            set -- -config "$SRB2MAINCFG"

        else

            set --

        fi

        clear
        $PRINTF "$PROMPT\n%s\n\e[0m" "Filelist:"
        $PRINTF "$NOTICE%s\n\e[0m" "$($PRINTF "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Do you want to advertise/list your server to Master Server? Please choose by typing number and then pressing enter. Press enter or ctrl+c to quit."

        for loop in "Yes" "No"; do $PRINTF "%s\n" "$((i += 1))) $loop"; done

        $PRINTF "#? "
        read -r choose
    do

        unset i
        case $choose in

            "1")

                while

                    $PRINTF "$MESSAGE\n%s\n\e[0m" "Please choose by typing number and then pressing enter. Press enter or ctrl+c to quit."

                    for loop in "Standard" "Casual" "Custom"; do $PRINTF "%s\n" "$((i += 1))) $loop"; done

                    $PRINTF "#? "
                    read -r choose
                do

                    unset i
                    case $choose in

                        "1")

                            $PRINTF "\n"

                            # Standard room.
                            if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                                flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -server "$@" -room 33 -port $PORT -file $FILELIST 2>&1

                            else

                                $SRB2 -server "$@" -room 33 -port $PORT -file $FILELIST 2>&1

                            fi

                            SRB2PID="$!"

                            # Restarting server from loop when there is error within game.
                            if [ -z "$NOSRB2SRVLOOP" ] || [ "$NOSRB2SRVLOOP" = 0 ]; then

                                while true; do

                                    sleep 5

                                    if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                                        clear
                                        $PRINTF "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                                        i=10
                                        while [ $i -le 10 ] && [ $i -gt 0 ]; do

                                            tput cup 4 $l
                                            i=$((i - 1))
                                            $PRINTF "%s\n" "$i"
                                            sleep 1

                                        done

                                        if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                                            flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -server "$@" -room 33 -port $PORT -file $FILELIST 2>&1

                                        else

                                            $SRB2 -server "$@" -room 33 -port $PORT -file $FILELIST 2>&1

                                        fi

                                        SRB2PID="$!"

                                    fi

                                done

                            fi
                            break

                            ;;

                        "2")

                            $PRINTF "\n"

                            # Casual room.
                            if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                                flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -server "$@" -room 28 -port $PORT -file $FILELIST 2>&1

                            else

                                $SRB2 -server "$@" -room 28 -port $PORT -file $FILELIST 2>&1

                            fi

                            SRB2PID="$!"

                            # Restarting server from loop when there is error within game.
                            if [ -z "$NOSRB2SRVLOOP" ] || [ "$NOSRB2SRVLOOP" = 0 ]; then

                                while true; do

                                    sleep 5

                                    if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                                        clear
                                        $PRINTF "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                                        i=10
                                        while [ $i -le 10 ] && [ $i -gt 0 ]; do

                                            tput cup 4 $l
                                            i=$((i - 1))
                                            $PRINTF "%s\n" "$i"
                                            sleep 1

                                        done

                                        if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                                            flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -server "$@" -room 28 -port $PORT -file $FILELIST 2>&1

                                        else

                                            $SRB2 -server "$@" -room 28 -port $PORT -file $FILELIST 2>&1

                                        fi

                                        SRB2PID="$!"

                                    fi

                                done

                            fi
                            break

                            ;;

                        "3")

                            $PRINTF "\n"

                            # Custom room.
                            if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                                flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -server "$@" -room 38 -port $PORT -file $FILELIST 2>&1

                            else

                                $SRB2 -server "$@" -room 38 -port $PORT -file $FILELIST 2>&1

                            fi

                            SRB2PID="$!"

                            # Restarting server from loop when there is error within game.
                            if [ -z "$NOSRB2SRVLOOP" ] || [ "$NOSRB2SRVLOOP" = 0 ]; then

                                while true; do

                                    sleep 5

                                    if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                                        clear
                                        $PRINTF "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                                        i=10
                                        while [ $i -le 10 ] && [ $i -gt 0 ]; do

                                            tput cup 4 $l
                                            i=$((i - 1))
                                            $PRINTF "%s\n" "$i"
                                            sleep 1

                                        done

                                        if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                                            flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -server "$@" -room 38 -port $PORT -file $FILELIST 2>&1

                                        else

                                            $SRB2 -server "$@" -room 38 -port $PORT -file $FILELIST 2>&1

                                        fi

                                        SRB2PID="$!"

                                    fi

                                done

                            fi
                            break

                            ;;

                        *)

                            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
                            exit

                            ;;

                    esac

                done
                break

                ;;

            "2")

                $PRINTF "\n"

                # Unlisted server.
                if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                    flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -server "$@" -port $PORT -file $FILELIST 2>&1

                else

                    $SRB2 -server "$@" -port $PORT -file $FILELIST 2>&1

                fi

                SRB2PID="$!"

                # Restarting server from loop when there is error within game.
                if [ -z "$NOSRB2SRVLOOP" ] || [ "$NOSRB2SRVLOOP" = 0 ]; then

                    while true; do

                        sleep 5

                        if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                            clear
                            $PRINTF "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                            i=10
                            while [ $i -le 10 ] && [ $i -gt 0 ]; do

                                tput cup 4 $l
                                i=$((i - 1))
                                $PRINTF "%s\n" "$i"
                                sleep 1

                            done

                            if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                                flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -server "$@" -port $PORT -file $FILELIST 2>&1

                            else

                                $SRB2 -server "$@" -port $PORT -file $FILELIST 2>&1

                            fi

                            SRB2PID="$!"

                        fi

                    done

                fi
                break

                ;;

            *)

                $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
                exit

                ;;

        esac

    done
}

serverkart() {
    # Hosting server for SRB2Kart. Checking which slashes in addons' paths where entered to determine OS and how the script should act to remove unnecessary arguments to find addons.
    IFS=";"

    if [ -n "$($PRINTF "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')" ]; then

        SLASHARG=$($PRINTF "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')

    else

        SLASHARG=$($PRINTF "%s\n" "$*" | gawk 'match($0, /\//) {print substr($0, RSTART, RLENGTH)}')

    fi

    checksrb2kart

    if ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$1" = "-sk" ] || [ "$1" = "--serverkart" ]); then

        PATHARGS=$($PRINTF "%s" "$*" | gawk '{gsub("-sk;|--serverkart;|;-p;[0-9][0-9]*|;--port;[0-9][0-9]*|-p;[0-9][0-9]*;|--port;[0-9][0-9]*;",""); gsub("~/","'$HOME'/"); print}')
        FILELIST=$(find $PATHARGS -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')
        clear
        $PRINTF "$PROMPT\n%s\n\e[0m" "Filelist:"
        $PRINTF "$NOTICE%s\n\e[0m" "$($PRINTF "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"

    elif ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$3" = "-sk" ] || [ "$3" = "--serverkart" ]); then

        shift 3
        FILELIST=$(find "$@" -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')
        clear
        $PRINTF "$PROMPT\n%s\n\e[0m" "Filelist:"
        $PRINTF "$NOTICE%s\n\e[0m" "$($PRINTF "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"

    else

        checklist

    fi

    # Setting config file for server.
    if [ -n "$SRB2KARTCFG" ] && [ -s "$SRB2KARTCFG" ]; then

        TEMPFILE=$(mktemp)
        {
            cat "$SRB2KARTMAINCFG"
            $PRINTF "\n"
            cat "$SRB2KARTCFG"
        } > "$TEMPFILE"
        set -- -config "$TEMPFILE"

    elif [ -n "$SRB2KARTMAINCFG" ] && [ -s "$SRB2KARTMAINCFG" ]; then

        set -- -config "$SRB2KARTMAINCFG"

    else

        set --

    fi

    $PRINTF "$NOTICE\n%s\n\e[0m" "Remember to type 'advertise 1' in console to advertise to Master Server."
    sleep 1

    if [ "$($PRINTF "%s\n" "$SRB2KART" | gawk '{print $1}')" = "flatpak" ]; then

        flatpak run $($PRINTF "%s\n" "$SRB2KART" | gawk '{print $NF}') -server "$@" -port $PORT -file $FILELIST 2>&1

    else

        $SRB2KART -server "$@" -port $PORT -file $FILELIST 2>&1

    fi

    SRB2PID="$!"

    # Restarting server from loop when there is error within game.
    if [ -z "$NOSRB2SRVLOOP" ] || [ "$NOSRB2SRVLOOP" = 0 ]; then

        while true; do

            sleep 5

            if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                clear
                $PRINTF "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                i=10
                while [ $i -le 10 ] && [ $i -gt 0 ]; do

                    tput cup 4 $l
                    i=$((i - 1))
                    $PRINTF "%s\n" "$i"
                    sleep 1

                done

                if [ "$($PRINTF "%s\n" "$SRB2KART" | gawk '{print $1}')" = "flatpak" ]; then

                    flatpak run $($PRINTF "%s\n" "$SRB2KART" | gawk '{print $NF}') -server "$@" -port $PORT -file $FILELIST 2>&1

                else

                    $SRB2KART -server "$@" -port $PORT -file $FILELIST 2>&1

                fi

                SRB2PID="$!"

            fi

        done

    fi
}

serverringracers() {
    # Hosting server for Ring Racers. Checking which slashes in addons' paths where entered to determine OS and how the script should act to remove unnecessary arguments to find addons.
    IFS=";"

    if [ -n "$($PRINTF "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')" ]; then

        SLASHARG=$($PRINTF "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')

    else

        SLASHARG=$($PRINTF "%s\n" "$*" | gawk 'match($0, /\//) {print substr($0, RSTART, RLENGTH)}')

    fi

    checkringracers

    if ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$1" = "-sr" ] || [ "$1" = "--serverringracers" ]); then

        PATHARGS=$($PRINTF "%s" "$*" | gawk '{gsub("-sr;|--serverringracers;|;-p;[0-9][0-9]*|;--port;[0-9][0-9]*|-p;[0-9][0-9]*;|--port;[0-9][0-9]*;",""); gsub("~/","'$HOME'/"); print}')
        FILELIST=$(find $PATHARGS -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')
        clear
        $PRINTF "$PROMPT\n%s\n\e[0m" "Filelist:"
        $PRINTF "$NOTICE%s\n\e[0m" "$($PRINTF "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"

    elif ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$3" = "-sr" ] || [ "$3" = "--serverringracers" ]); then

        shift 3
        FILELIST=$(find "$@" -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')
        clear
        $PRINTF "$PROMPT\n%s\n\e[0m" "Filelist:"
        $PRINTF "$NOTICE%s\n\e[0m" "$($PRINTF "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"

    else

        checklist

    fi

    # Setting config file for server.
    if [ -n "$RINGRACERSCFG" ] && [ -s "$RINGRACERSCFG" ]; then

        TEMPFILE=$(mktemp)
        {
            cat "$RINGRACERSMAINCFG"
            $PRINTF "\n"
            cat "$RINGRACERSCFG"
        } > "$TEMPFILE"
        set -- -config "$TEMPFILE"

    elif [ -n "$RINGRACERSMAINCFG" ] && [ -s "$RINGRACERSMAINCFG" ]; then

        set -- -config "$RINGRACERSMAINCFG"

    else

        set --

    fi

    $PRINTF "$NOTICE\n%s\n\e[0m" "Remember to type 'advertise 1' in console to advertise to Master Server."
    sleep 1

    if [ "$($PRINTF "%s\n" "$RINGRACERS" | gawk '{print $1}')" = "flatpak" ]; then

        flatpak run $($PRINTF "%s\n" "$RINGRACERS" | gawk '{print $NF}') -server "$@" -port $PORT -file $FILELIST 2>&1

    else

        $RINGRACERS -noexchndl -server "$@" -port $PORT -file $FILELIST 2>&1

    fi

    SRB2PID="$!"

    # Restarting server from loop when there is error within game.
    if [ -z "$NOSRB2SRVLOOP" ] || [ "$NOSRB2SRVLOOP" = 0 ]; then

        while true; do

            sleep 5

            if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                clear
                $PRINTF "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                i=10
                while [ $i -le 10 ] && [ $i -gt 0 ]; do

                    tput cup 4 $l
                    i=$((i - 1))
                    $PRINTF "%s\n" "$i"
                    sleep 1

                done

                if [ "$($PRINTF "%s\n" "$RINGRACERS" | gawk '{print $1}')" = "flatpak" ]; then

                    flatpak run $($PRINTF "%s\n" "$RINGRACERS" | gawk '{print $NF}') -server "$@" -port $PORT -file $FILELIST 2>&1

                else

                    $RINGRACERS -noexchndl -server "$@" -port $PORT -file $FILELIST 2>&1

                fi

                SRB2PID="$!"

            fi

        done

    fi
}

srb2ms() {
    SRVCODE=$(curl -sL "$SRB2MSURL" | gawk '{gsub("&#x27;|&#39;","\\47"); gsub("&amp;","\\&"); print}')

    # Check connection to SRB2 Master Server.
    if [ -z "$(printf "%s\n" "$SRVCODE" | gawk 'match($0, /Players/) {print substr($0, RSTART, RLENGTH)}' | head -n1)" ]; then

        clear
        $PRINTF "$FAILURE\n%s\n\e[0m" "ERROR: Can't connect to Master Server. Try again later or check your internet connection."
        exit

    fi

    # Connecting to SRB2 servers in Master Server. Keeping colored names, players, IP, gametype, etc.
    SRVIP=$(printf "%s\n" "$SRVCODE" | gawk -F'<|>' '/copyIP/ && !/EMPTY LAND ZONE|function/ {print $3}')
    SRVNAMECOLOR=$(printf "%s$(printf "%s\n" "$SRVCODE" | gawk '/"servername">/ && !/>Unreachable</ {gsub("<h1 class=\"servername\">|<span style=\"color:inherit*.\"></span>|<span style=\"color:inherit*.\">|<span style=\"color:#f3a3a3;\"></span><span style=\"color:#69e046;\"></span><span style=\"color:#69e046;\"></span><span style=\"color:#ff9736;\"></span><span style=\"color:#ffff0f;\"></span>|</h1>",""); gsub("^[ \t]+",""); print}' | gawk '{gsub("<span style=\"color:#ffff0f;\">","\\e[0;38;2;255;255;15m"); gsub("<span style=\"color:#69e046;\">","\\e[0;38;2;105;224;70m"); gsub("<span style=\"color:#7373ff;\">","\\e[0;38;2;115;115;255m"); gsub("<span style=\"color:#ff3f3f;\">","\\e[0;38;2;255;63;63m"); gsub("<span style=\"color:#ff9736;\">","\\e[0;38;2;255;151;54m"); gsub("<span style=\"color:#a7a7a7;\">","\\e[0;38;2;167;167;167m"); gsub("<span style=\"color:#55c8ff;\">","\\e[0;38;2;85;200;255m"); gsub("<span style=\"color:#c4c4e1;\">","\\e[0;38;2;196;196;225m"); gsub("<span style=\"color:#df00df;\">","\\e[0;38;2;223;0;223m"); gsub("<span style=\"color:#bf7b4b;\">","\\e[0;38;2;191;123;75m"); gsub("<span style=\"color:#d7bb43;\">","\\e[0;38;2;215;187;67m"); gsub("<span style=\"color:#c7e494;\">","\\e[0;38;2;199;228;148m"); gsub("<span style=\"color:#cf7fcf;\">","\\e[0;38;2;207;127;207m"); gsub("<span style=\"color:#c599ff;\">","\\e[0;38;2;197;153;255m"); gsub("<span style=\"color:#979797;\">","\\e[0;38;2;151;151;151m"); gsub("<span style=\"color:#f3a3a3;\">","\\e[0;38;2;243;163;163m"); gsub("</span>","\033[0m"); print}')\n")
    SRVNAMENOCOLOR=$(printf "%s\n" "$SRVNAMECOLOR" | gawk '{gsub(/\033\[[0-9;]*m/,"")}1')
    PLAYERS=$(printf "%s\n" "$SRVCODE" | gawk -F'<img title="|"' '/img title="[0-9]*\/[0-9]*"/ {print $4}')
    GAMETYPE=$(printf "%s\n" "$SRVCODE" | gawk -F'<div class="gametype">|</div>' '/<div class="gametype">.*.<\/div>/ {print $2}')
    MAP=$(printf "%s\n" "$SRVCODE" | gawk -F'<strong>|</strong>' '/Playing on/ && !/EMPTY LAND ZONE/ {print $2}')
    arraynametmp=$(printf "%s\n\033[1;34mFilter\033[0m\n\033[1;34mRefresh\033[0m" "$(gawk -v left="$SRVNAMECOLOR" -v leftcenter="$SRVIP" -v center="$PLAYERS" -v rightcenter="$GAMETYPE" -v right="$MAP" 'BEGIN{
split(left,l,/\n/)
split(leftcenter,lc,/\n/)
split(center,c,/\n/)
split(rightcenter,rc,/\n/)
split(right,r,/\n/)
for (i = 1; i in l; i++) {print l[i] " - " "\033[2mIP: "lc[i]"\033[0m" " - " "\033[37mPlayers: "c[i]"\033[0m" " - " "\033[37mGametype: "rc[i]"\033[0m" " - " "\033[37mMap: "r[i]"\033[0m"}}')")
    arraytmp=$(printf "%s\nFilter\nRefresh" "$(gawk -v left="$SRVIP" -v leftcenter="$SRVNAMENOCOLOR" -v center="$PLAYERS" -v rightcenter="$GAMETYPE" -v right="$MAP" 'BEGIN{
split(left,l,/\n/)
split(leftcenter,lc,/\n/)
split(center,c,/\n/)
split(rightcenter,rc,/\n/)
split(right,r,/\n/)
for (i = 1; i in l; i++) {print l[i],lc[i],c[i],rc[i],r[i]}}' | gawk '!/ $/ {print}')")
    array="$arraytmp"
    arrayname="$arraynametmp"

    # Room selected.
    if ([ "$1" = "-r" ] || [ "$1" = "--room" ]) && [ -z "$ROOM" ]; then

        if [ "$2" = "standard" ]; then

            STANDARD="1"
            set -- 33

        elif [ "$2" = "casual" ]; then

            CASUAL="1"
            set -- 28

        elif [ "$2" = "custom" ]; then

            CUSTOM="1"
            set -- 38

        fi

        ROOM=1
        SRVAPIIP=$(curl -s "https://mb.srb2.org/MS/0/rooms/$1/servers" | gawk '!/^33$|^28$|^38$/ {printf $1":"$2"|"}' | gawk '{gsub("\\|$",""); print}')
        array=$(printf "%s\n" "$arraytmp" | gawk '/'"$SRVAPIIP"'/ || /^Filter$|^Refresh$/ {print}')
        arrayname=$(printf "%s\n" "$arraynametmp" | gawk '/'"$SRVAPIIP"'/ || /\033\[1;34mFilter\033\[0m|\033\[1;34mRefresh\033\[0m/ {print}')

    elif [ "$ROOM" = "1" ]; then

        if [ "$STANDARD" = "1" ]; then

            unset CASUAL CUSTOM
            set -- 33

        elif [ "$CASUAL" = "1" ]; then

            unset STANDARD CUSTOM
            set -- 28

        elif [ "$CUSTOM" = "1" ]; then

            unset STANDARD CASUAL
            set -- 38

        fi

        ROOM=1
        SRVAPIIP=$(curl -s "https://mb.srb2.org/MS/0/rooms/$1/servers" | gawk '!/^33$|^28$|^38$/ && /'"$($PRINTF "%s\n" "$SRVAPIIP" | gawk '{gsub(":"," "); print}')"'/ {printf $1":"$2"|"}' | gawk '{gsub("\\|$",""); print}')
        array=$(printf "%s\n" "$arraytmp" | gawk '/'"$SRVAPIIP"'/ || /^Filter$|^Refresh$/ {print}')
        arrayname=$(printf "%s\n" "$arraynametmp" | gawk '/'"$SRVAPIIP"'/ || /\033\[1;34mFilter\033\[0m|\033\[1;34mRefresh\033\[0m/ {print}')

    # Filtering list of SRB2 servers.
    elif ([ "$1" = "-f" ] || [ "$1" = "--filter" ]) && [ -z "$SRVAPIIP" ]; then

        SRVAPIIP=$(printf "%s\n" "$array" | gawk '{gsub(/\033\[[0-9;]*m/,"")}1' | gawk '{IGNORECASE=1} /'"$($PRINTF "%s\n" "$2" | gawk '{gsub("\\/","\\/"); gsub("*","\\*"); gsub("\\[","\\["); gsub("\\]","\\]"); gsub("\\(","\\("); gsub("\\)","\\)"); print}')"'/ {printf $1"|"}' | gawk '{gsub("\\|$",""); print}')
        array=$(printf "%s\n" "$arraytmp" | gawk '/'"$SRVAPIIP"'/ || /^Filter$|^Refresh$/ {print}')
        arrayname=$(printf "%s\n" "$arraynametmp" | gawk '/'"$SRVAPIIP"'/ || /^\033\[1;34mFilter\033\[0m$|^\033\[1;34mRefresh\033\[0m$/ {print}')

    elif [ -n "$SRVAPIIP" ]; then

        SRVAPIIP=$(printf "$array" | gawk '{gsub(/\033\[[0-9;]*m/,"")}1' | gawk '{IGNORECASE=1} /'"$($PRINTF "%s\n" "$SRVAPIIP" | gawk '{gsub("\\/","\\/"); gsub("*","\\*"); gsub("\\[","\\["); gsub("\\]","\\]"); gsub("\\(","\\("); gsub("\\)","\\)"); printf $1"|"}' | gawk '{gsub("\\|$",""); print}')"'/ {printf $1"|"}' | gawk '{gsub("\\|$",""); print}')
        array=$(printf "%s\n" "$arraytmp" | gawk '/'"$SRVAPIIP"'/ || /^Filter$|^Refresh$/ {print}')
        arrayname=$(printf "%s\n" "$arraynametmp" | gawk '/'"$SRVAPIIP"'/ || /^\033\[1;34mFilter\033\[0m$|^\033\[1;34mRefresh\033\[0m$/ {print}')

    fi

    count=$(printf "%s\n" "$array" | wc -l)
    n=""
    while true; do

        clear
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Please choose server by typing number and then pressing enter. Press enter or ctrl+c to quit."
        $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            OPTURL=$($PRINTF "%s\n" "$array" | gawk 'NR=='"${n}"' {print $1}')

            if [ "$OPTURL" = "Filter" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Please enter text to filter. Press ctrl+c to quit."
                read -r SRVAPIIP
                STANDARD="$STANDARD" CASUAL="$CASUAL" CUSTOM="$CUSTOM" ROOM="$ROOM" SRVAPIIP=$(printf "$arraytmp" | gawk '{IGNORECASE=1} /'"$($PRINTF "%s\n" "$SRVAPIIP" | gawk '{gsub("\\/","\\/"); gsub("*","\\*"); gsub("\\[","\\["); gsub("\\]","\\]"); gsub("\\(","\\("); gsub("\\)","\\)"); printf $1"|"}' | gawk '{gsub("\\|$",""); print}')"'/ {printf $1"|"}' | gawk '{gsub("\\|$",""); print}') exec "$0"

            elif [ "$OPTURL" = "Refresh" ]; then

                STANDARD="$STANDARD" CASUAL="$CASUAL" CUSTOM="$CUSTOM" ROOM="$ROOM" SRVAPIIP="" exec "$0"

            else

                IFS=";"
                SRB2=$($PRINTF "%s\n" "$SRB2" | gawk '{gsub(" /",";/"); gsub(" -",";-"); print}')
                $PRINTF "$MESSAGE\n%s\n\e[0m" "Connecting to server $OPTURL."
                sleep 1

                if [ "$($PRINTF "%s\n" "$SRB2" | gawk '{print $1}')" = "flatpak" ]; then

                    flatpak run $($PRINTF "%s\n" "$SRB2" | gawk '{print $NF}') -connect $OPTURL 2>&1 || checksrb2

                else

                    $SRB2 -connect $OPTURL 2>&1 || checksrb2

                fi

            fi
            break

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

srb2kartms() {
    SRVCODE=$(curl -sL "$SRB2KARTMSURL" | gawk '{gsub("&#x27;|&#39;","\\47"); gsub("&amp;","\\&"); print}')

    # Check connection to SRB2 Master Server.
    if [ -z "$(printf "%s\n" "$SRVCODE" | gawk 'match($0, /Players/) {print substr($0, RSTART, RLENGTH)}' | head -n1)" ]; then

        clear
        $PRINTF "$FAILURE\n%s\n\e[0m" "ERROR: Can't connect to Master Server. Try again later or check your internet connection."
        exit

    fi

    # Connecting to SRB2Kart servers in Master Server. Keeping colored names, players, IP, gametype, etc.
    SRVUNREACHIP=$(printf "%s|" $(printf "%s\n" "$SRVCODE" | gawk '/Unreachable \(*.*\)/ {gsub("\\(|\\)|</td>",""); printf "%s|", $2}' | gawk '{gsub(/\|$/,""); print}') | gawk '{gsub("\\|$",""); print}')
    SRVIP=$(printf "%s\n" "$SRVCODE" | gawk -F'href="srb2kart://ip/|">🔗</a>' '/srb2kart:/ {print $2}' | gawk '!/'$SRVUNREACHIP'/ {print}')
    SRVNAMECOLOR=$(printf "%s$(printf "%s\n" "$SRVCODE" | gawk '/<h1 class="servername">/ && !/<h1 class="servername">Unreachable<\/h1>/ {gsub("<h1 class=\"servername\">|</h1>|<span style=\"color:inherit\">|<span style=\"color:inherit;\">",""); gsub("^[ \t]+",""); print}' | gawk '{gsub("<span style=\"color:#ffff0f;\">","\\e[0;38;2;255;255;15m"); gsub("<span style=\"color:#69e046;\">","\\e[0;38;2;105;224;70m"); gsub("<span style=\"color:#7373ff;\">","\\e[0;38;2;115;115;255m"); gsub("<span style=\"color:#ff3f3f;\">","\\e[0;38;2;255;63;63m"); gsub("<span style=\"color:#ff9736;\">","\\e[0;38;2;255;151;54m"); gsub("<span style=\"color:#a7a7a7;\">","\\e[0;38;2;167;167;167m"); gsub("<span style=\"color:#55c8ff;\">","\\e[0;38;2;85;200;255m"); gsub("<span style=\"color:#c4c4e1;\">","\\e[0;38;2;196;196;225m"); gsub("<span style=\"color:#df00df;\">","\\e[0;38;2;223;0;223m"); gsub("<span style=\"color:#bf7b4b;\">","\\e[0;38;2;191;123;75m"); gsub("<span style=\"color:#d7bb43;\">","\\e[0;38;2;215;187;67m"); gsub("<span style=\"color:#c7e494;\">","\\e[0;38;2;199;228;148m"); gsub("<span style=\"color:#cf7fcf;\">","\\e[0;38;2;207;127;207m"); gsub("<span style=\"color:#c599ff;\">","\\e[0;38;2;197;153;255m"); gsub("<span style=\"color:#979797;\">","\\e[0;38;2;151;151;151m"); gsub("<span style=\"color:#f3a3a3;\">","\\e[0;38;2;243;163;163m"); gsub("<span style=\"color:#ffc7a7;\">","\\e[0;38;2;255;199;167m"); gsub("</span>","\033[0m"); print}')\n")
    SRVNAMENOCOLOR=$(printf "%s\n" "$SRVNAMECOLOR" | gawk '{gsub(/\033\[[0-9;]*m/,"")}1')
    PLAYERS=$(printf "%s\n" "$SRVCODE" | gawk '/- [0-9]* \// && !/\(None\)/ {getline t; print $3,$4,$5,t}' | gawk NF'{gsub(" |players<br>|-",""); gsub("/"," / "); print}')
    GAMETYPE=$(printf "%s\n" "$SRVCODE" | gawk '/- [0-9]* \// && !/\(None\)/ {print $1}')
    KARTSPEED=$(printf "%s\n" "$SRVCODE" | gawk '/- [0-9]* \// && !/\(None\)/ {gsub("\\(|\\)",""); print $2}')
    MAP=$(printf "%s\n" "$SRVCODE" | gawk -F'<strong>|</strong>' '/Playing on/ && !/EMPTY LAND ZONE/ {print $2}')
    arraynametmp=$(printf "%s\n\033[1;34mFilter\033[0m\n\033[1;34mRefresh\033[0m" "$(gawk -v left="$SRVNAMECOLOR" -v leftcenter="$SRVIP" -v center="$PLAYERS" -v rightcenter="$GAMETYPE" -v right="$KARTSPEED" -v furtherright="$MAP" 'BEGIN{
split(left,l,/\n/)
split(leftcenter,lc,/\n/)
split(center,c,/\n/)
split(rightcenter,rc,/\n/)
split(right,r,/\n/)
split(furtherright,fr,/\n/)
for (i = 1; i in l; i++) {print l[i] " - " "\033[2mIP: "lc[i]"\033[0m" " - " "\033[37mPlayers: "c[i]"\033[0m" " - " "\033[37mGametype: "rc[i]"\033[0m" " - " "\033[37mKartspeed: "r[i]"\033[0m" " - " "\033[37mMap: "fr[i]"\033[0m"}}')")
    arraytmp=$(printf "%s\nFilter\nRefresh" "$(gawk -v left="$SRVIP" -v leftcenter="$SRVNAMENOCOLOR" -v center="$PLAYERS" -v rightcenter="$GAMETYPE" -v right="$KARTSPEED" -v furtherright="$MAP" 'BEGIN{
split(left,l,/\n/)
split(leftcenter,lc,/\n/)
split(center,c,/\n/)
split(rightcenter,rc,/\n/)
split(right,r,/\n/)
split(furtherright,fr,/\n/)
for (i = 1; i in l; i++) {print l[i],lc[i],c[i],rc[i],r[i],fr[i]}}' | gawk '!/-$/ {print}')")
    array="$arraytmp"
    arrayname="$arraynametmp"

    # Filtering list of SRB2Kart servers.
    if ([ "$1" = "-fk" ] || [ "$1" = "--filterkart" ]) && [ -z "$SRVAPIIP" ]; then

        SRVAPIIP=$(printf "$array" | gawk '{gsub(/\033\[[0-9;]*m/,"")}1' | gawk '{IGNORECASE=1} /'"$($PRINTF "%s\n" "$2" | gawk '{gsub("\\/","\\/"); gsub("*","\\*"); gsub("\\[","\\["); gsub("\\]","\\]"); gsub("\\(","\\("); gsub("\\)","\\)"); print}')"'/ {printf $1"|"}' | gawk '{gsub("\\|$",""); print}')
        array=$(printf "%s\n" "$arraytmp" | gawk '/'"$SRVAPIIP"'/ || /^Filter$|^Refresh$/ {print}')
        arrayname=$(printf "%s\n" "$arraynametmp" | gawk '/'"$SRVAPIIP"'/ || /^\033\[1;34mFilter\033\[0m$|^\033\[1;34mRefresh\033\[0m$/ {print}')

    elif [ -n "$SRVAPIIP" ]; then

        SRVAPIIP=$(printf "$array" | gawk '{gsub(/\033\[[0-9;]*m/,"")}1' | gawk '{IGNORECASE=1} /'"$($PRINTF "%s\n" "$SRVAPIIP" | gawk '{gsub("\\/","\\/"); gsub("*","\\*"); gsub("\\[","\\["); gsub("\\]","\\]"); gsub("\\(","\\("); gsub("\\)","\\)"); printf $1"|"}' | gawk '{gsub("\\|$",""); print}')"'/ {printf $1"|"}' | gawk '{gsub("\\|$",""); print}')
        array=$(printf "%s\n" "$arraytmp" | gawk '/'"$SRVAPIIP"'/ || /^Filter$|^Refresh$/ {print}')
        arrayname=$(printf "%s\n" "$arraynametmp" | gawk '/'"$SRVAPIIP"'/ || /^\033\[1;34mFilter\033\[0m$|^\033\[1;34mRefresh\033\[0m$/ {print}')

    fi

    count=$(printf "%s\n" "$array" | wc -l)
    n=""
    while true; do

        clear
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Please choose server by typing number and then pressing enter. Press enter or ctrl+c to quit."
        $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            OPTURL=$($PRINTF "%s\n" "$array" | gawk 'NR=='"${n}"' {print $1}')

            if [ "$OPTURL" = "Filter" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Please enter text to filter. Press ctrl+c to quit."
                read -r SRVAPIIP
                SRVAPIIP=$(printf "$arraytmp" | gawk '{IGNORECASE=1} /'"$($PRINTF "%s\n" "$SRVAPIIP" | gawk '{gsub("\\/","\\/"); gsub("*","\\*"); gsub("\\[","\\["); gsub("\\]","\\]"); gsub("\\(","\\("); gsub("\\)","\\)"); printf $1"|"}' | gawk '{gsub("\\|$",""); print}')"'/ {printf $1"|"}' | gawk '{gsub("\\|$",""); print}') exec "$0" --kart

            elif [ "$OPTURL" = "Refresh" ]; then

                SRVAPIIP="" exec "$0" --kart

            else

                IFS=";"
                SRB2KART=$($PRINTF "%s\n" "$SRB2KART" | gawk '{gsub(" /",";/"); gsub(" -",";-"); print}')
                $PRINTF "$MESSAGE\n%s\n\e[0m" "Connecting to server $OPTURL."
                sleep 1

                if [ "$($PRINTF "%s\n" "$SRB2KART" | gawk '{print $1}')" = "flatpak" ]; then

                    flatpak run $($PRINTF "%s\n" "$SRB2KART" | gawk '{print $NF}') -connect $OPTURL 2>&1 || checksrb2kart

                else

                    $SRB2KART -connect $OPTURL 2>&1 || checksrb2kart

                fi

            fi
            break

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

ringracersms() {
    SRVCODE=$(curl -sL "$RINGRACERSMSURL" | gawk '{gsub("\",","\",\n"); print}')

    # Check connection to SRB2 Master Server.
    if [ -z "$(printf "%s\n" "$SRVCODE" | gawk 'match($0, /num_humans/) {print substr($0, RSTART, RLENGTH)}' | head -n1)" ]; then

        clear
        $PRINTF "$FAILURE\n%s\n\e[0m" "ERROR: Can't connect to Master Server. Try again later or check your internet connection."
        exit

    fi

    # Connecting to Ring Racers servers in Master Server. Keeping colored names, players, IP, gametype, etc.
    SRVUNREACHIP=$(printf "%s|" $(printf "%s\n" "$SRVCODE" | gawk -F'\\["|",' '/"error":"unreachable"/ {print p2} {p2=p1; p1=$2}') | gawk '{gsub("\\|$",""); print}')
    SRVIP=$(printf "%s\n" "$SRVCODE" | gawk '!/'$SRVUNREACHIP'/ {print}' | gawk -F'\\["|",' '/"address":/ {print $2}')
    SRVPORT=$(printf "%s\n" "$SRVCODE" | gawk '!/'$SRVUNREACHIP'/ {print}' | gawk -F'\\],"' '/"address":/ {getline; print $1}')
    #    SRVNAMECOLOR=$(printf "%s$(printf "%s\n" "$SRVCODE" | gawk -F':"|"' '/"server_name":/ {print $10}' | gawk '{gsub("\\^2","\\e[0;38;2;255;255;15m"); gsub("\\^3","\\e[0;38;2;105;224;70m"); gsub("\\^4","\\e[0;38;2;115;115;255m"); gsub("\\^5","\\e[0;38;2;255;63;63m"); gsub("\\^7","\\e[0;38;2;255;151;54m"); gsub("\\^6","\\e[0;38;2;167;167;167m"); gsub("\\^8","\\e[0;38;2;85;200;255m"); gsub("\\^C","\\e[0;38;2;196;196;225m"); gsub("\\^1","\\e[0;38;2;223;0;223m"); gsub("@","\\e[0;38;2;191;123;75m"); gsub("\\^A","\\e[0;38;2;215;187;67m"); gsub("\\^B","\\e[0;38;2;199;228;148m"); gsub("\\^9","\\e[0;38;2;207;127;207m"); gsub("@","\\e[0;38;2;197;153;255m"); gsub("@","\\e[0;38;2;151;151;151m"); gsub("\\^D","\\e[0;38;2;243;163;163m"); gsub("@","\\e[0;38;2;255;199;167m"); gsub("</span>","\033[0m"); gsub("\\^0","\\e[0m"); print}')\n")
    SRVNAMECOLOR=$(printf "%s$(printf "%s\n" "$SRVCODE" | gawk -F':"|"' '/"server_name":/ {print $10}' | gawk '{gsub("\\^2","\\e[0;38;2;255;255;15m"); gsub("\\^3","\\e[0;38;2;105;224;70m"); gsub("\\^4","\\e[0;38;2;115;115;255m"); gsub("\\^5","\\e[0;38;2;255;63;63m"); gsub("\\^7","\\e[0;38;2;255;151;54m"); gsub("\\^6","\\e[0;38;2;167;167;167m"); gsub("\\^8","\\e[0;38;2;85;200;255m"); gsub("\\^C","\\e[0;38;2;196;196;225m"); gsub("\\^1","\\e[0;38;2;223;0;223m"); gsub("\\^A","\\e[0;38;2;215;187;67m"); gsub("\\^B","\\e[0;38;2;199;228;148m"); gsub("\\^9","\\e[0;38;2;207;127;207m"); gsub("\\^D","\\e[0;38;2;243;163;163m"); gsub("</span>","\033[0m"); gsub("\\^0","\\e[0m"); print}')\n")
    SRVNAMENOCOLOR=$(printf "%s\n" "$SRVNAMECOLOR" | gawk '{gsub("\\^0",""); print}')
    PLAYERS=$(printf "%s\n" "$SRVCODE" | gawk -F',' '/"num_humans":/ {gsub("\"num_humans\":",""); gsub(",\"max_connections\":"," / "); print $1}')
    GAMETYPE=$(printf "%s\n" "$SRVCODE" | gawk -F':' '/"gametype":/ {gsub("\"|,",""); print $2}')
    KARTSPEED=$(printf "%s\n" "$SRVCODE" | gawk -F':' '/"speed":/ {gsub("\"|,",""); print $NF}')
    MAP=$(printf "%s\n" "$SRVCODE" | gawk -F':' '/"map_title":/ && !/EMPTY LAND ZONE/ {gsub("\"|,",""); print $2}')

    arraynametmp=$(printf "%s\n" "$(gawk -v furtherleft="$SRVNAMECOLOR" -v left="$SRVIP" -v leftcenter="$SRVPORT" -v center="$PLAYERS" -v rightcenter="$GAMETYPE" -v right="$KARTSPEED" -v furtherright="$MAP" 'BEGIN{
split(furtherleft,fl,/\n/)
split(left,l,/\n/)
split(leftcenter,lc,/\n/)
split(center,c,/\n/)
split(rightcenter,rc,/\n/)
split(right,r,/\n/)
split(furtherright,fr,/\n/)
for (i = 1; i in l; i++) {print fl[i]"\033[0m" " - " "\033[2mIP: "l[i]":"lc[i]"\033[0m" " - " "\033[37mPlayers: "c[i]"\033[0m" " - " "\033[37mGametype: "rc[i]"\033[0m" " - " "\033[37mKartspeed: "r[i]"\033[0m" " - " "\033[37mMap: "fr[i]"\033[0m"}}')")

    arraynametmp=$(printf "%s$(printf "%s\n" "$arraynametmp" | gawk -F ' - ' '
{
    split($3, players, " ");
    playerCount = players[2];
    servers[NR] = $0;
    playerCounts[NR] = playerCount;
}
END {
    n = asort(playerCounts, sortedPlayerCounts);
    for (i = n; i >= 1; i--) {
        for (j in servers) {
            split(servers[j], parts, " - ");
            split(parts[3], players, " ");
            if (players[2] == sortedPlayerCounts[i]) {
                print servers[j];
                delete servers[j];
                break;
            }
        }
    }
}')\n\033[1;34mFilter\033[0m\n\033[1;34mRefresh\033[0m")

    arraytmp=$(printf "%s\nFilter\nRefresh" "$(gawk -v furtherleft="$SRVIP" -v left="$SRVPORT" -v leftcenter="$SRVNAMENOCOLOR" -v center="$PLAYERS" -v rightcenter="$GAMETYPE" -v right="$KARTSPEED" -v furtherright="$MAP" 'BEGIN{
split(furtherleft,fl,/\n/)
split(left,l,/\n/)
split(leftcenter,lc,/\n/)
split(center,c,/\n/)
split(rightcenter,rc,/\n/)
split(right,r,/\n/)
split(furtherright,fr,/\n/)
for (i = 1; i in l; i++) {print fl[i]":"l[i],lc[i],c[i],rc[i],r[i],fr[i]}}' | gawk '!/-$/ {print}')")

    arraytmp=$(printf "%s$(printf "%s\n" "$arraytmp" | gawk '
{
    # Find the pattern matching "number / number"
    match($0, /([0-9]+) \/ ([0-9]+)/, players);
    playerCount = players[1];  # Extract the first number from the match

    # Store the line and the player count
    lines[NR] = $0;
    playerCounts[NR] = playerCount;
}

END {
    # Sort the player counts
    n = asort(playerCounts, sortedPlayerCounts);

    # Print the lines in the order of sorted player counts (reverse order)
    for (i = n; i >= 1; i--) {
        for (j in lines) {
            # Find the player count again to match with sorted counts
            match(lines[j], /([0-9]+) \/ ([0-9]+)/, players);
            if (players[1] == sortedPlayerCounts[i]) {
                print lines[j];
                delete lines[j];
                break;
            }
        }
    }
}')")

    array="$arraytmp"
    arrayname="$arraynametmp"

    # Filtering list of Ring Racers servers.
    if ([ "$1" = "-fr" ] || [ "$1" = "--filterringracers" ]) && [ -z "$SRVAPIIP" ]; then

        SRVAPIIP=$(printf "$array" | gawk '{gsub(/\033\[[0-9;]*m/,"")}1' | gawk '{IGNORECASE=1} /'"$($PRINTF "%s\n" "$2" | gawk '{gsub("\\/","\\/"); gsub("*","\\*"); gsub("\\[","\\["); gsub("\\]","\\]"); gsub("\\(","\\("); gsub("\\)","\\)"); print}')"'/ {printf $1"|"}' | gawk '{gsub("\\|$",""); print}')
        array=$(printf "%s\n" "$arraytmp" | gawk '/'"$SRVAPIIP"'/ || /^Filter$|^Refresh$/ {print}')
        arrayname=$(printf "%s\n" "$arraynametmp" | gawk '/'"$SRVAPIIP"'/ || /^\033\[1;34mFilter\033\[0m$|^\033\[1;34mRefresh\033\[0m$/ {print}')

    elif [ -n "$SRVAPIIP" ]; then

        SRVAPIIP=$(printf "$array" | gawk '{gsub(/\033\[[0-9;]*m/,"")}1' | gawk '{IGNORECASE=1} /'"$($PRINTF "%s\n" "$SRVAPIIP" | gawk '{gsub("\\/","\\/"); gsub("*","\\*"); gsub("\\[","\\["); gsub("\\]","\\]"); gsub("\\(","\\("); gsub("\\)","\\)"); printf $1"|"}' | gawk '{gsub("\\|$",""); print}')"'/ {printf $1"|"}' | gawk '{gsub("\\|$",""); print}')
        array=$(printf "%s\n" "$arraytmp" | gawk '/'"$SRVAPIIP"'/ || /^Filter$|^Refresh$/ {print}')
        arrayname=$(printf "%s\n" "$arraynametmp" | gawk '/'"$SRVAPIIP"'/ || /^\033\[1;34mFilter\033\[0m$|^\033\[1;34mRefresh\033\[0m$/ {print}')

    fi

    count=$(printf "%s\n" "$array" | wc -l)
    n=""
    while true; do

        clear
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Please choose server by typing number and then pressing enter. Press enter or ctrl+c to quit."
        $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            OPTURL=$($PRINTF "%s\n" "$array" | gawk 'NR=='"${n}"' {print $1}')

            if [ "$OPTURL" = "Filter" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Please enter text to filter. Press ctrl+c to quit."
                read -r SRVAPIIP
                SRVAPIIP=$(printf "$arraytmp" | gawk '{IGNORECASE=1} /'"$($PRINTF "%s\n" "$SRVAPIIP" | gawk '{gsub("\\/","\\/"); gsub("*","\\*"); gsub("\\[","\\["); gsub("\\]","\\]"); gsub("\\(","\\("); gsub("\\)","\\)"); printf $1"|"}' | gawk '{gsub("\\|$",""); print}')"'/ {printf $1"|"}' | gawk '{gsub("\\|$",""); print}') exec "$0" --ringracers

            elif [ "$OPTURL" = "Refresh" ]; then

                SRVAPIIP="" exec "$0" --ringracers

            else

                IFS=";"
                RINGRACERS=$($PRINTF "%s\n" "$RINGRACERS" | gawk '{gsub(" /",";/"); gsub(" -",";-"); print}')
                $PRINTF "$MESSAGE\n%s\n\e[0m" "Connecting to server $OPTURL."
                sleep 1

                if [ "$($PRINTF "%s\n" "$RINGRACERS" | gawk '{print $1}')" = "flatpak" ]; then

                    flatpak run $($PRINTF "%s\n" "$RINGRACERS" | gawk '{print $NF}') -connect $OPTURL 2>&1 || checkringracers

                else

                    $RINGRACERS -noexchndl -connect $OPTURL 2>&1 || checkringracers

                fi

            fi
            break

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

usage() {
    $PRINTF "%s\n" "
CLI for server related tools of SRB2/SRB2Kart/Ring Racers.

Usage: srb2srv [OPTION] <parameter>
  OPTIONS:
     -h, --help                                   Show this help text.
     -c, --checkport                              Check if SRB2/SRB2Kart/Ring Racers server is reachable.
     -d, --dedicated            <addon-path>      Start dedicated SRB2 server.
     -dk, --dedicatedkart       <addon-path>      Start dedicated SRB2Kart server.
     -dr, --dedicatedringracers <addon-path>      Start dedicated Ring Racers server.
     -f, --filter               <filter-query>    Filter list of SRB2 servers by query like server name, IP, gametype or map.
     -fk, --filterkart          <filter-query>    Filter list of SRB2Kart servers by query like server name, IP, gametype or kartspeed.
     -fr, --filterringracers    <filter-query>    Filter list of Ring Racers servers by query like server name, IP, gametype or kartspeed.
     -i, --ip                   <server-ip>       Join SRB2 server from IP.
     -ik, --ipkart              <server-ip>       Join SRB2Kart server from IP.
     -ir, --ipringracers        <server-ip>       Join Ring Racers server from IP.
     -k, --kart                                   Go to SRB2Kart Master Server.
     -kr, --ringracers                            Go to Ring Racers Master Server.
     -p, --port                 <port-number>     Specify the local UDP port to use. Works with -c, -d, -dk, -dr, -s, -sk and -sr options.
     -r, --room                 <room-name>       Go to SRB2 Master Server room. Available parameters: \"standard\", \"casual\" and \"custom\".
     -s, --server               <addon-path>      Start SRB2 server and play.
     -sk, --serverkart          <addon-path>      Start SRB2Kart server and play.
     -sr, --serverringracers    <addon-path>      Start Ring Racers server and play.

  EXAMPLES:
     1. Go to SRB2 Master Server and connect to selected server from list:
            srb2srv

     2. Go to Ring Racers Master Server and connect to selected server from list:
            srb2srv --ringracers

     3. Check if port 5030 for SRB2/SRB2Kart/Ring Racers server is opened (default port to be checked is 5029 without --port option):
            srb2srv --checkport --port 5030

     4. Run SRB2 server and add path to addon or directory of addons (default port to hosting server is 5029):
            srb2srv --server \"\$HOME/addon.pk3\"

     5. Run SRB2Kart dedicated server with port 5030 and add path to addon or directory of addons (default port to hosting server is 5029 without --port option):
            srb2srv --dedicatedkart \"\$HOME/addon.pk3\" --port 5030

     6. Join SRB2 server:
            srb2srv --ip 123.84.116.123:5029

     7. Go to SRB2 Master Server room. Available parameters: \"standard\", \"casual\" and \"custom\":
            srb2srv --room standard

     8. Filter list of SRB2 servers by server name:
           srb2srv --filter \"The Gaming Den - Vanilla\"

     9. Filter list of SRB2Kart servers by kartspeed:
            srb2srv --filterkart \"Normal\"

  NOTES:
     - Exporting SRB2/SRB2Kart/Ring Racers executable file (\"lsdl2srb2\", \"lsdlsrb2\", \"srb2\", \"srb2win.exe\", \"srb2win64.exe\", \"srb2.exe\", \"Sonic Robo Blast 2\", \"lsdl2srb2kart\", \"srb2kart\", \"srb2kart.exe\", \"Sonic Robo Blast 2 Kart\", \"ringracers\", \"ringracers.exe\", \"Ring Racers\") path or \"flatpak [SRB2/SRB2Kart/Ring Racers Flatpak Application ID]\" (for installed Flatpaks, Linux only) in \"SRB2\", \"SRB2KART\" or \"RINGRACERS\" environment variable to shell configuration file (for example in \".bashrc\" or \".bash_profile\") is required for script to work.
     Here are a few examples:
       SRB2
         1. Linux:
            - export SRB2=\"\$HOME/Games/SRB2/lsdl2srb2\",
            - export SRB2=\"\$HOME/Games/SRB2/lsdlsrb2\",
            - export SRB2=\"\$HOME/Games/SRB2/srb2\",
            - export SRB2=\"/usr/local/bin/srb2\",
            - export SRB2=\"flatpak org.srb2.SRB2\".

         2. Windows:
            - export SRB2=\"\$HOME/Games/SRB2/srb2win.exe\",
            - export SRB2=\"\$HOME/Games/SRB2/srb2win64.exe\",
            - export SRB2=\"\$HOME/Games/SRB2/srb2.exe\",
            - export SRB2=\"C:\Users\user\Games\SRB2\srb2win.exe\".

         3. macOS:
            - export SRB2=\"/Applications/Sonic Robo Blast 2.app/Contents/MacOS/Sonic Robo Blast 2\".

       SRB2Kart
         1. Linux:
            - export SRB2KART=\"\$HOME/Games/SRB2Kart/lsdl2srb2kart\",
            - export SRB2KART=\"\$HOME/Games/SRB2Kart/srb2kart\",
            - export SRB2KART=\"/usr/local/bin/srb2kart\",
            - export SRB2KART=\"flatpak org.srb2.SRB2Kart\".

         2. Windows:
            - export SRB2KART=\"\$HOME/Games/SRB2Kart/srb2kart.exe\",
            - export SRB2KART=\"C:\Users\user\Games\SRB2Kart\srb2kart.exe\".

         3. macOS:
            - export SRB2KART=\"/Applications/Sonic Robo Blast 2 Kart.app/Contents/MacOS/Sonic Robo Blast 2 Kart\".

       RING RACERS
         1. Linux:
            - export RINGRACERS=\"\$HOME/Games/RingRacers/ringracers\",
            - export RINGRACERS=\"\$HOME/Games/RingRacers/ringracers\",
            - export RINGRACERS=\"/usr/local/bin/ringracers\",
            - export RINGRACERS=\"flatpak org.kartkrew.RingRacers\".

         2. Windows:
            - export RINGRACERS=\"\$HOME/Games/RingRacers/ringracers.exe\",
            - export RINGRACERS=\"C:\Users\user\Games\RingRacers\ringracers.exe\".

         3. macOS:
            - export RINGRACERS=\"/Applications/Ring Racers.app/Contents/MacOS/Ring Racers\".

     - This script does not set port forwarding and open port in system's firewall for you. You need to do this manually on your router and system. For more information read the guide in: https://www.jameds.org/portforward.

     - To automate inputting in script for hosting server, do for example 'echo \"1\n3\" | srb2srv -d [path to directory of addons for dedicated server]', which means it will make input to list dedicated server in Custom room on Master Server.

     - Full path to game's main configuration file can be set with SRB2MAINCFG, SRB2KARTMAINCFG or RINGRACERSMAINCFG variable to shell configuration file, otherwise script assumes default file, if SRB2MAINCFG, SRB2KARTMAINCFG or RINGRACERSMAINCFG is not set.

     - There is also additional SRB2CFG, SRB2KARTCFG and RINGRACERSCFG variables of other configuration files, which can temporary override settings of set SRB2MAINCFG, SRB2KARTMAINCFG and RINGRACERSCFG.

     - To turn off automatic restart of server after error, set environment variable \"export NOSRB2SRVLOOP=1\".

     - Other environment variables to use. To activate them with value \"1\", do for example \"export SRB2SRVDEBUG=1\":

          - SRB2SRVDEBUG - Getting verbose output from script. Useful for reporting issues in https://github.com/bijman/srb2srv/issues.
"
    exit
}

# Checking --port argument, if it is entered or it is in range of 0-65535. Defaulting to 5029, if does not meat requirements.
PORTARG=$($PRINTF "%s\n" "$*" | gawk 'match($0, /-p [0-9][0-9]*|--port [0-9][0-9]*/) {print substr($0, RSTART, RLENGTH)}')
if [ -n "$PORTARG" ]; then

    if ([ "$($PRINTF "%s\n" "$PORTARG" | gawk 'match($0, /-p/) {print substr($0, RSTART, RLENGTH)}')" = "-p" ] || [ "$($PRINTF "%s\n" "$PORTARG" | gawk 'match($0, /--port/) {print substr($0, RSTART, RLENGTH)}')" = "--port" ]) && [ "$($PRINTF "%s\n" "$PORTARG" | gawk 'match($0, /[0-9][0-9]*/) {print substr($0, RSTART, RLENGTH)}')" -ge 0 ] && [ "$($PRINTF "%s\n" "$PORTARG" | gawk 'match($0, /[0-9][0-9]*/) {print substr($0, RSTART, RLENGTH)}')" -le 65535 ]; then

        PORT=$($PRINTF "%s\n" "$PORTARG" | gawk 'match($0, /[0-9][0-9]*/) {print substr($0, RSTART, RLENGTH)}')

    fi

else

    PORT="5029"

fi

case "$3" in

    -d | --dedicated)

        dedicated "$@"

        ;;

    -dk | --dedicatedkart)

        dedicatedkart "$@"

        ;;

    -dr | --dedicatedringracers)

        dedicatedringracers "$@"

        ;;

    -s | --server)

        server "$@"

        ;;

    -sk | --serverkart)

        serverkart "$@"

        ;;

    -sr | --serverringracers)

        serverringracers "$@"

        ;;

esac

case "$1" in

    -h | --help)

        usage

        ;;

    "")

        srb2ms

        ;;

    -c | --checkport)

        checkport

        ;;

    -d | --dedicated)

        dedicated "$@"

        ;;

    -dk | --dedicatedkart)

        dedicatedkart "$@"

        ;;

    -dr | --dedicatedringracers)

        dedicatedringracers "$@"

        ;;

    -f | --filter)

        srb2ms "$@"

        ;;

    -fk | --filterkart)

        srb2kartms "$@"

        ;;

    -fr | --filterringracers)

        ringracersms "$@"

        ;;

    -i | --ip)

        ip "$@"

        ;;

    -ik | --ipkart)

        ipkart "$@"

        ;;

    -ir | --ipringracers)

        ipringracers "$@"

        ;;

    -k | --kart)

        srb2kartms

        ;;

    -kr | --ringracers)

        ringracersms

        ;;

    -r | --room)

        srb2ms "$@"

        ;;

    -s | --server)

        server "$@"

        ;;

    -sk | --serverkart)

        serverkart "$@"

        ;;

    -sr | --serverringracers)

        serverringracers "$@"

        ;;

esac
