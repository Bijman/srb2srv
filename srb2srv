#!/bin/sh

OS="$(uname)"
SRB2MSURL="https://ms.srb2.org"
SRB2KARTMSURL="https://ms.kartkrew.org"
FAILURE="\e[1;91m"
NOTICE="\e[1;93m"
MESSAGE="\e[1;94m"
PROMPT="\e[1;4;97m"

# Killing script's process for quiting from hosting server.
if [ "$(printf "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$(printf "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]; then

    trap "kill -9 $(ps -a | gawk '/bash/ {print $1}')" 2

else

    trap "kill -9 $(ps -a | gawk '/srb2srv/ {print $1}')" 2

fi

checklist() {
    # Giving user choice, if there needs to be more addons added or not.
    while

        clear
        printf "$PROMPT\n%s\n\e[0m" "Filelist:"
        printf "$NOTICE%s\n\e[0m" "$(printf "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"
        printf "$MESSAGE\n%s\n\e[0m" "Do you want to add addons? Please choose by typing number and then pressing enter. Press enter or ctrl+c to quit."

        for loop in "Yes" "No"; do printf "%s\n" "$((i += 1))) $loop"; done

        printf "#? "
        read -r choose
    do

        unset i
        case $choose in

            "1")

                printf "$MESSAGE\n%s\n\e[0m" "Please enter addons' absolute path for server."
                unset STRING
                read -r STRING

                FILELISTTMP="$(printf "%s\n" "$STRING" | gawk '{gsub("~/","'$HOME'/");print}')"
                FILELIST="$FILELISTTMP;$FILELIST"
                FILELIST=$(find $FILELIST -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')

                checklist
                break

                ;;

            "2")

                break

                ;;

            *)

                printf "$NOTICE\n%s\n\e[0m" "No option has been chosen."
                exit

                ;;

        esac

    done
}

checkport() {
    # Checking port entered by -p/--port option.
    printf "$NOTICE\n%s\n\e[0m" "Before running this, make sure that your server is up."

    if [ -n "$(curl -s "https://www.jameds.org/SRB2/port/?p=$PORT" | gawk '/is unreachable/')" ]; then

        curl -s "https://www.jameds.org/SRB2/port/?p=$PORT" | gawk '/<p class="ip">/,/<\/div>/ {split($0,a,"<"); print a[1]}' | gawk '{getline a; getline b; getline c; print "\033[7;31m"a""b" "c"\033[0m"}'

    else

        curl -s "https://www.jameds.org/SRB2/port/?p=$PORT" | gawk '/<p class="ip">/,/<\/div>/ {split($0,a,"<"); print a[1]}' | gawk 'NF{getline a; getline b; print "\033[7;32m"$0" "b"\033[0m"}'

    fi

}

checksrb2() {
    # Checking if valid executable was entered to SRB2 environment variable.
    if [ "$SRB2" = "flatpak" ]; then

        SRB2="flatpak"

    elif [ -z "$SRB2" ] || [ ! -f "$(printf "%s\n" "$SRB2" | gawk -F';' '{gsub(" /",";/") gsub(" \\\\",";\\\\") gsub(" -",";-");print $1}')" ]; then

        printf "$FAILURE\n%s\n\e[0m" "ERROR: No executable file found in SRB2 environment variable (\"lsdl2srb2\", \"lsdlsrb2\", \"srb2\", \"srb2win.exe\", \"srb2win64.exe\", \"srb2.exe\", \"Sonic Robo Blast 2\") or SRB2 environment variable is not set at all. Set valid path to executable file in SRB2 environment variable in shell configuration file (for example in \".bash_profile\" or \".bashrc\").

EXAMPLES:
         1. Linux:
            - export SRB2=\"\$HOME/Games/SRB2/lsdl2srb2\",
            - export SRB2=\"\$HOME/Games/SRB2/lsdlsrb2\",
            - export SRB2=\"\$HOME/Games/SRB2/srb2\",
            - export SRB2=\"/usr/bin/srb2\",
            - export SRB2=\"flatpak\".

         2. Windows:
            - export SRB2=\"\$HOME/Games/SRB2/srb2win.exe\",
            - export SRB2=\"\$HOME/Games/SRB2/srb2win64.exe\",
            - export SRB2=\"\$HOME/Games/SRB2/srb2.exe\",
            - export SRB2=\"C:\Users\user\Games\SRB2\srb2win.exe\".

         3. macOS:
            - export SRB2=\"/Applications/Sonic Robo Blast 2.app/Contents/MacOS/Sonic Robo Blast 2\"."

        exit

    else

        SRB2=$(printf "%s\n" "$SRB2" | gawk '{gsub(" /",";/") gsub(" \\\\",";\\\\") gsub(" -",";-");print}')

    fi
}

checksrb2kart() {
    # Checking if valid executable was entered to SRB2KART environment variable.
    if [ "$SRB2KART" = "flatpak" ]; then

        SRB2KART="flatpak"

    elif [ -z "$SRB2KART" ] || [ ! -f "$(printf "%s\n" "$SRB2KART" | gawk -F';' '{gsub(" /",";/") gsub(" \\\\",";\\\\") gsub(" -",";-");print $1}')" ]; then

        printf "$FAILURE\n%s\n\e[0m" "ERROR: No executable file found in SRB2Kart environment variable (\"lsdl2srb2kart\", \"srb2kart\", \"srb2kart.exe\", \"Sonic Robo Blast 2 Kart\") or SRB2Kart environment variable is not set at all. Set valid path to executable file in SRB2Kart environment variable in shell configuration file (for example in \".bash_profile\" or \".bashrc\").

EXAMPLES:
         1. Linux:
            - export SRB2KART=\"\$HOME/Games/SRB2Kart/lsdl2srb2kart\",
            - export SRB2KART=\"\$HOME/Games/SRB2Kart/srb2kart\",
            - export SRB2KART=\"/usr/bin/srb2kart\",
            - export SRB2KART=\"flatpak\".

         2. Windows:
            - export SRB2KART=\"\$HOME/Games/SRB2Kart/srb2kart.exe\",
            - export SRB2KART=\"C:\Users\user\Games\SRB2Kart\srb2kart.exe\".

         3. macOS:
            - export SRB2KART=\"/Applications/Sonic Robo Blast 2 Kart.app/Contents/MacOS/Sonic Robo Blast 2 Kart\"."

        exit

    else

        SRB2KART=$(printf "%s\n" "$SRB2KART" | gawk '{gsub(" /",";/") gsub(" \\\\",";\\\\") gsub(" -",";-");print}')

    fi
}

dedicated() {
    # Hosting dedicated server for SRB2. Checking which slashes in addons' paths where entered to determine OS and how the script should act to remove unnecessary arguments to find addons.
    IFS=";"

    if [ -n "$(printf "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')" ]; then

        SLASHARG=$(printf "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')

    else

        SLASHARG=$(printf "%s\n" "$*" | gawk 'match($0, /\//) {print substr($0, RSTART, RLENGTH)}')

    fi

    checksrb2

    if ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$1" = "-d" ] || [ "$1" = "--dedicated" ]); then

        PATHARGS=$(printf "%s" "$*" | gawk '{gsub("-d;|--dedicated;|;-p;[0-9][0-9]*|;--port;[0-9][0-9]*|-p;[0-9][0-9]*;|--port;[0-9][0-9]*;","") gsub("~/","'$HOME'/");print}')

        FILELIST=$(find $PATHARGS -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')

    elif ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$3" = "-d" ] || [ "$3" = "--dedicated" ]); then

        shift 3

        FILELIST=$(find "$@" -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')

    else

        checklist

    fi

    while

        # Setting config file for server.
        if [ -n "$SRB2CFG" ] && [ -s "$SRB2CFG" ]; then

            TEMPFILE=$(mktemp)
            {
                cat "$SRB2MAINCFG"
                printf "\n"
                cat "$SRB2CFG"
            } > "$TEMPFILE"
            set -- -config "$TEMPFILE"

        elif [ -n "$SRB2MAINCFG" ] && [ -s "$SRB2MAINCFG" ]; then

            set -- -config "$SRB2MAINCFG"

        else

            set --

        fi

        clear
        printf "$PROMPT\n%s\n\e[0m" "Filelist:"
        printf "$NOTICE%s\n\e[0m" "$(printf "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"
        printf "$MESSAGE\n%s\n\e[0m" "Do you want to advertise/list your server to Master Server? Please choose by typing number and then pressing enter. Press enter or ctrl+c to quit."

        for loop in "Yes" "No"; do printf "%s\n" "$((i += 1))) $loop"; done

        printf "#? "
        read -r choose
    do

        unset i
        case $choose in

            "1")

                while

                    printf "$MESSAGE\n%s\n\e[0m" "Please choose by typing number and then pressing enter. Press enter or ctrl+c to quit."

                    for loop in "Standard" "Casual" "Custom"; do printf "%s\n" "$((i += 1))) $loop"; done

                    printf "#? "
                    read -r choose
                do

                    unset i
                    case $choose in

                        "1")

                            printf "\n"

                            # Unsetting DISPLAY for a purpose of suppressing any message popups.
                            unset DISPLAY

                            # Standard room.
                            if [ "$SRB2" = "flatpak" ]; then

                                flatpak run org.srb2.SRB2 -dedicated "$@" -room 33 -port $PORT -file $FILELIST 2>&1

                            else

                                $SRB2 -dedicated "$@" -room 33 -port $PORT -file $FILELIST 2>&1

                            fi

                            SRB2PID="$!"

                            # Restarting server loop when there is error within game.
                            while true; do

                                sleep 5

                                if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                                    clear
                                    printf "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                                    i=10
                                    while [ $i -le 10 ] && [ $i -gt 0 ]; do

                                        tput cup 4 $l
                                        i=$((i - 1))
                                        printf "%s\n" "$i"
                                        sleep 1

                                    done

                                    if [ "$SRB2" = "flatpak" ]; then

                                        flatpak run org.srb2.SRB2 -dedicated "$@" -room 33 -port $PORT -file $FILELIST 2>&1

                                    else

                                        $SRB2 -dedicated "$@" -room 33 -port $PORT -file $FILELIST 2>&1

                                    fi

                                    SRB2PID="$!"

                                fi

                            done
                            break

                            ;;

                        "2")

                            printf "\n"

                            # Unsetting DISPLAY for a purpose of suppressing any message popups.
                            unset DISPLAY

                            # Casual room.
                            if [ "$SRB2" = "flatpak" ]; then

                                flatpak run org.srb2.SRB2 -dedicated "$@" -room 28 -port $PORT -file $FILELIST 2>&1

                            else

                                $SRB2 -dedicated "$@" -room 28 -port $PORT -file $FILELIST 2>&1

                            fi

                            SRB2PID="$!"

                            # Restarting server loop when there is error within game.
                            while true; do

                                sleep 5

                                if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                                    clear
                                    printf "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                                    i=10
                                    while [ $i -le 10 ] && [ $i -gt 0 ]; do

                                        tput cup 4 $l
                                        i=$((i - 1))
                                        printf "%s\n" "$i"
                                        sleep 1

                                    done

                                    if [ "$SRB2" = "flatpak" ]; then

                                        flatpak run org.srb2.SRB2 -dedicated "$@" -room 28 -port $PORT -file $FILELIST 2>&1

                                    else

                                        $SRB2 -dedicated "$@" -room 28 -port $PORT -file $FILELIST 2>&1

                                    fi

                                    SRB2PID="$!"

                                fi

                            done
                            break

                            ;;

                        "3")

                            printf "\n"

                            # Unsetting DISPLAY for a purpose of suppressing any message popups.
                            unset DISPLAY

                            # Custom room.
                            if [ "$SRB2" = "flatpak" ]; then

                                flatpak run org.srb2.SRB2 -dedicated "$@" -room 38 -port $PORT -file $FILELIST 2>&1

                            else

                                $SRB2 -dedicated "$@" -room 38 -port $PORT -file $FILELIST 2>&1

                            fi

                            SRB2PID="$!"

                            # Restarting server loop when there is error within game.
                            while true; do

                                sleep 5

                                if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                                    clear
                                    printf "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                                    i=10
                                    while [ $i -le 10 ] && [ $i -gt 0 ]; do

                                        tput cup 4 $l
                                        i=$((i - 1))
                                        printf "%s\n" "$i"
                                        sleep 1

                                    done

                                    if [ "$SRB2" = "flatpak" ]; then

                                        flatpak run org.srb2.SRB2 -dedicated "$@" -room 38 -port $PORT -file $FILELIST 2>&1

                                    else

                                        $SRB2 -dedicated "$@" -room 38 -port $PORT -file $FILELIST 2>&1

                                    fi

                                    SRB2PID="$!"

                                fi

                            done
                            break

                            ;;

                        *)

                            printf "$NOTICE\n%s\n\e[0m" "No option has been chosen."
                            exit

                            ;;

                    esac

                done

                break

                ;;

            "2")

                printf "\n"

                # Unsetting DISPLAY for a purpose of suppressing any message popups.
                unset DISPLAY

                # Unlisted server.
                if [ "$SRB2" = "flatpak" ]; then

                    flatpak run org.srb2.SRB2 -dedicated "$@" -port $PORT -file $FILELIST 2>&1

                else

                    $SRB2 -dedicated "$@" -port $PORT -file $FILELIST 2>&1

                fi

                SRB2PID="$!"

                # Restarting server loop when there is error within game.
                while true; do

                    sleep 5

                    if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                        clear
                        printf "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                        i=10
                        while [ $i -le 10 ] && [ $i -gt 0 ]; do

                            tput cup 4 $l
                            i=$((i - 1))
                            printf "%s\n" "$i"
                            sleep 1

                        done

                        if [ "$SRB2" = "flatpak" ]; then

                            flatpak run org.srb2.SRB2 -dedicated "$@" -port $PORT -file $FILELIST 2>&1

                        else

                            $SRB2 -dedicated "$@" -port $PORT -file $FILELIST 2>&1

                        fi

                        SRB2PID="$!"

                    fi

                done
                break

                ;;

            *)

                printf "$NOTICE\n%s\n\e[0m" "No option has been chosen."
                exit

                ;;

        esac

    done
}

dedicatedkart() {
    # Hosting dedicated server for SRB2Kart. Checking which slashes in addons' paths where entered to determine OS and how the script should act to remove unnecessary arguments to find addons.
    IFS=";"

    if [ -n "$(printf "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')" ]; then

        SLASHARG=$(printf "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')

    else

        SLASHARG=$(printf "%s\n" "$*" | gawk 'match($0, /\//) {print substr($0, RSTART, RLENGTH)}')

    fi

    checksrb2kart

    if ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$1" = "-dk" ] || [ "$1" = "--dedicatedkart" ]); then

        PATHARGS=$(printf "%s" "$*" | gawk '{gsub("-dk;|--dedicatedkart;|;-p;[0-9][0-9]*|;--port;[0-9][0-9]*|-p;[0-9][0-9]*;|--port;[0-9][0-9]*;","") gsub("~/","'$HOME'/");print}')
        FILELIST=$(find $PATHARGS -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')
        clear
        printf "$PROMPT\n%s\n\e[0m" "Filelist:"
        printf "$NOTICE%s\n\e[0m" "$(printf "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"

    elif ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$3" = "-dk" ] || [ "$3" = "--dedicatedkart" ]); then

        shift 3
        FILELIST=$(find "$@" -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')
        clear
        printf "$PROMPT\n%s\n\e[0m" "Filelist:"
        printf "$NOTICE%s\n\e[0m" "$(printf "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"

    else

        checklist

    fi

    # Setting config file for server.
    if [ -n "$SRB2KARTCFG" ] && [ -s "$SRB2KARTCFG" ]; then

        TEMPFILE=$(mktemp)
        {
            cat "$SRB2KARTMAINCFG"
            printf "\n"
            cat "$SRB2KARTCFG"
        } > "$TEMPFILE"
        set -- -config "$TEMPFILE"

    elif [ -n "$SRB2KARTMAINCFG" ] && [ -s "$SRB2KARTMAINCFG" ]; then

        set -- -config "$SRB2KARTMAINCFG"

    else

        set --

    fi

    printf "$NOTICE\n%s\n\e[0m" "Remember to type 'advertise 1' in console to advertise to Master Server."
    sleep 1
    unset DISPLAY

    if [ "$SRB2KART" = "flatpak" ]; then

        flatpak run org.srb2.SRB2Kart -dedicated "$@" -port $PORT -file $FILELIST 2>&1

    else

        $SRB2KART -dedicated "$@" -port $PORT -file $FILELIST 2>&1

    fi

    SRB2PID="$!"

    # Restarting server loop when there is error within game.
    while true; do

        sleep 5

        if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

            clear
            printf "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

            i=10
            while [ $i -le 10 ] && [ $i -gt 0 ]; do

                tput cup 4 $l
                i=$((i - 1))
                printf "%s\n" "$i"
                sleep 1

            done

            if [ "$SRB2KART" = "flatpak" ]; then

                flatpak run org.srb2.SRB2Kart -dedicated "$@" -port $PORT -file $FILELIST 2>&1

            else

                $SRB2KART -dedicated "$@" -port $PORT -file $FILELIST 2>&1

            fi

            SRB2PID="$!"

        fi

    done
}

ip() {
    IFS=";"
    SRB2=$(printf "%s\n" "$SRB2" | gawk '{gsub(" /",";/") gsub(" -",";-");print}')

    checksrb2
    printf "$MESSAGE\n%s\n\e[0m" "Connecting to server $2."
    sleep 1

    if [ "$SRB2" = "flatpak" ]; then

        flatpak run org.srb2.SRB2 -connect $2 2>&1 || checksrb2

    else

        $SRB2 -connect $2 2>&1 || checksrb2

    fi
}

ipkart() {
    IFS=";"
    SRB2KART=$(printf "%s\n" "$SRB2KART" | gawk '{gsub(" /",";/") gsub(" -",";-");print}')

    checksrb2kart
    printf "$MESSAGE\n%s\n\e[0m" "Connecting to server $2."
    sleep 1

    if [ "$SRB2KART" = "flatpak" ]; then

        flatpak run org.srb2.SRB2Kart -connect $2 2>&1 || checksrb2kart

    else

        $SRB2KART -connect $2 2>&1 || checksrb2kart

    fi
}

server() {
    # Hosting server for SRB2. Checking which slashes in addons' paths where entered to determine OS and how the script should act to remove unnecessary arguments to find addons.
    IFS=";"

    if [ -n "$(printf "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')" ]; then

        SLASHARG=$(printf "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')

    else

        SLASHARG=$(printf "%s\n" "$*" | gawk 'match($0, /\//) {print substr($0, RSTART, RLENGTH)}')

    fi

    checksrb2

    if ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$1" = "-s" ] || [ "$1" = "--server" ]); then

        PATHARGS=$(printf "%s" "$*" | gawk '{gsub("-s;|--server;|;-p;[0-9][0-9]*|;--port;[0-9][0-9]*|-p;[0-9][0-9]*;|--port;[0-9][0-9]*;","") gsub("~/","'$HOME'/");print}')
        FILELIST=$(find $PATHARGS -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')

    elif ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$3" = "-s" ] || [ "$3" = "--server" ]); then

        shift 3
        FILELIST=$(find "$@" -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')

    else

        checklist

    fi

    while

        # Setting config file for server.
        if [ -n "$SRB2CFG" ] && [ -s "$SRB2CFG" ]; then

            TEMPFILE=$(mktemp)
            {
                cat "$SRB2MAINCFG"
                printf "\n"
                cat "$SRB2CFG"
            } > "$TEMPFILE"
            set -- -config "$TEMPFILE"

        elif [ -n "$SRB2MAINCFG" ] && [ -s "$SRB2MAINCFG" ]; then

            set -- -config "$SRB2MAINCFG"

        else

            set --

        fi

        clear
        printf "$PROMPT\n%s\n\e[0m" "Filelist:"
        printf "$NOTICE%s\n\e[0m" "$(printf "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"
        printf "$MESSAGE\n%s\n\e[0m" "Do you want to advertise/list your server to Master Server? Please choose by typing number and then pressing enter. Press enter or ctrl+c to quit."

        for loop in "Yes" "No"; do printf "%s\n" "$((i += 1))) $loop"; done

        printf "#? "
        read -r choose
    do

        unset i
        case $choose in

            "1")

                while

                    printf "$MESSAGE\n%s\n\e[0m" "Please choose by typing number and then pressing enter. Press enter or ctrl+c to quit."

                    for loop in "Standard" "Casual" "Custom"; do printf "%s\n" "$((i += 1))) $loop"; done

                    printf "#? "
                    read -r choose
                do

                    unset i
                    case $choose in

                        "1")

                            printf "\n"

                            # Standard room.
                            if [ "$SRB2" = "flatpak" ]; then

                                flatpak run org.srb2.SRB2 -server "$@" -room 33 -port $PORT -file $FILELIST 2>&1

                            else

                                $SRB2 -server "$@" -room 33 -port $PORT -file $FILELIST 2>&1

                            fi

                            SRB2PID="$!"

                            # Restarting server loop when there is error within game.
                            while true; do

                                sleep 5

                                if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                                    clear
                                    printf "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                                    i=10
                                    while [ $i -le 10 ] && [ $i -gt 0 ]; do

                                        tput cup 4 $l
                                        i=$((i - 1))
                                        printf "%s\n" "$i"
                                        sleep 1

                                    done

                                    if [ "$SRB2" = "flatpak" ]; then

                                        flatpak run org.srb2.SRB2 -server "$@" -room 33 -port $PORT -file $FILELIST 2>&1

                                    else

                                        $SRB2 -server "$@" -room 33 -port $PORT -file $FILELIST 2>&1

                                    fi

                                    SRB2PID="$!"

                                fi

                            done
                            break

                            ;;

                        "2")

                            printf "\n"

                            # Casual room.
                            if [ "$SRB2" = "flatpak" ]; then

                                flatpak run org.srb2.SRB2 -server "$@" -room 28 -port $PORT -file $FILELIST 2>&1

                            else

                                $SRB2 -server "$@" -room 28 -port $PORT -file $FILELIST 2>&1

                            fi

                            SRB2PID="$!"

                            # Restarting server loop when there is error within game.
                            while true; do

                                sleep 5

                                if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                                    clear
                                    printf "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                                    i=10
                                    while [ $i -le 10 ] && [ $i -gt 0 ]; do

                                        tput cup 4 $l
                                        i=$((i - 1))
                                        printf "%s\n" "$i"
                                        sleep 1

                                    done

                                    if [ "$SRB2" = "flatpak" ]; then

                                        flatpak run org.srb2.SRB2 -server "$@" -room 28 -port $PORT -file $FILELIST 2>&1

                                    else

                                        $SRB2 -server "$@" -room 28 -port $PORT -file $FILELIST 2>&1

                                    fi

                                    SRB2PID="$!"

                                fi

                            done
                            break

                            ;;

                        "3")

                            printf "\n"

                            # Custom room.
                            if [ "$SRB2" = "flatpak" ]; then

                                flatpak run org.srb2.SRB2 -server "$@" -room 38 -port $PORT -file $FILELIST 2>&1

                            else

                                $SRB2 -server "$@" -room 38 -port $PORT -file $FILELIST 2>&1

                            fi

                            SRB2PID="$!"

                            # Restarting server loop when there is error within game.
                            while true; do

                                sleep 5

                                if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                                    clear
                                    printf "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                                    i=10
                                    while [ $i -le 10 ] && [ $i -gt 0 ]; do

                                        tput cup 4 $l
                                        i=$((i - 1))
                                        printf "%s\n" "$i"
                                        sleep 1

                                    done

                                    if [ "$SRB2" = "flatpak" ]; then

                                        flatpak run org.srb2.SRB2 -server "$@" -room 38 -port $PORT -file $FILELIST 2>&1

                                    else

                                        $SRB2 -server "$@" -room 38 -port $PORT -file $FILELIST 2>&1

                                    fi

                                    SRB2PID="$!"

                                fi

                            done
                            break

                            ;;

                        *)

                            printf "$NOTICE\n%s\n\e[0m" "No option has been chosen."
                            exit

                            ;;

                    esac

                done
                break

                ;;

            "2")

                printf "\n"

                # Unlisted server.
                if [ "$SRB2" = "flatpak" ]; then

                    flatpak run org.srb2.SRB2 -server "$@" -port $PORT -file $FILELIST 2>&1

                else

                    $SRB2 -server "$@" -port $PORT -file $FILELIST 2>&1

                fi

                SRB2PID="$!"

                # Restarting server loop when there is error within game.
                while true; do

                    sleep 5

                    if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

                        clear
                        printf "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

                        i=10
                        while [ $i -le 10 ] && [ $i -gt 0 ]; do

                            tput cup 4 $l
                            i=$((i - 1))
                            printf "%s\n" "$i"
                            sleep 1

                        done

                        if [ "$SRB2" = "flatpak" ]; then

                            flatpak run org.srb2.SRB2 -server "$@" -port $PORT -file $FILELIST 2>&1

                        else

                            $SRB2 -server "$@" -port $PORT -file $FILELIST 2>&1

                        fi

                        SRB2PID="$!"

                    fi

                done
                break

                ;;

            *)

                printf "$NOTICE\n%s\n\e[0m" "No option has been chosen."
                exit

                ;;

        esac

    done
}

serverkart() {
    # Hosting server for SRB2Kart. Checking which slashes in addons' paths where entered to determine OS and how the script should act to remove unnecessary arguments to find addons.
    IFS=";"

    if [ -n "$(printf "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')" ]; then

        SLASHARG=$(printf "%s\n" "$*" | gawk 'match($0, /\\/) {print substr($0, RSTART, RLENGTH)}')

    else

        SLASHARG=$(printf "%s\n" "$*" | gawk 'match($0, /\//) {print substr($0, RSTART, RLENGTH)}')

    fi

    checksrb2kart

    if ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$1" = "-sk" ] || [ "$1" = "--serverkart" ]); then

        PATHARGS=$(printf "%s" "$*" | gawk '{gsub("-sk;|--serverkart;|;-p;[0-9][0-9]*|;--port;[0-9][0-9]*|-p;[0-9][0-9]*;|--port;[0-9][0-9]*;","") gsub("~/","'$HOME'/");print}')
        FILELIST=$(find $PATHARGS -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')
        clear
        printf "$PROMPT\n%s\n\e[0m" "Filelist:"
        printf "$NOTICE%s\n\e[0m" "$(printf "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"

    elif ([ "$SLASHARG" = "/" ] || [ "$SLASHARG" = "\\" ]) && ([ "$3" = "-sk" ] || [ "$3" = "--serverkart" ]); then

        shift 3
        FILELIST=$(find "$@" -maxdepth 1 -type f | gawk '!a[$0]++' | gawk '{printf "%s;", $0}')
        clear
        printf "$PROMPT\n%s\n\e[0m" "Filelist:"
        printf "$NOTICE%s\n\e[0m" "$(printf "%s\n" "$FILELIST" | gawk '{gsub(";","\n"); print}' | gawk -F'/' '{print $NF}' | gawk '!a[$0]++')"

    else

        checklist

    fi

    # Setting config file for server.
    if [ -n "$SRB2KARTCFG" ] && [ -s "$SRB2KARTCFG" ]; then

        TEMPFILE=$(mktemp)
        {
            cat "$SRB2KARTMAINCFG"
            printf "\n"
            cat "$SRB2KARTCFG"
        } > "$TEMPFILE"
        set -- -config "$TEMPFILE"

    elif [ -n "$SRB2KARTMAINCFG" ] && [ -s "$SRB2KARTMAINCFG" ]; then

        set -- -config "$SRB2KARTMAINCFG"

    else

        set --

    fi

    printf "$NOTICE\n%s\n\e[0m" "Remember to type 'advertise 1' in console to advertise to Master Server."
    sleep 1

    if [ "$SRB2KART" = "flatpak" ]; then

        flatpak run org.srb2.SRB2Kart -server "$@" -port $PORT -file $FILELIST 2>&1

    else

        $SRB2KART -server "$@" -port $PORT -file $FILELIST 2>&1

    fi

    SRB2PID="$!"

    # Restarting server loop when there is error within game.
    while true; do

        sleep 5

        if [ "$(ps -a | gawk '/'$SRB2PID'/ {print $1}')" != "$!" ]; then

            clear
            printf "$FAILURE\n%s\n\e[0m" "Something went wrong with server. Check latest-log.txt and .rpt file for errors, if you are on Windows, otherwise it is crash-log.txt on other systems. Server will restart in 10 seconds. Press ctrl+c to quit."

            i=10
            while [ $i -le 10 ] && [ $i -gt 0 ]; do

                tput cup 4 $l
                i=$((i - 1))
                printf "%s\n" "$i"
                sleep 1

            done

            if [ "$SRB2KART" = "flatpak" ]; then

                flatpak run org.srb2.SRB2Kart -server "$@" -port $PORT -file $FILELIST 2>&1

            else

                $SRB2KART -server "$@" -port $PORT -file $FILELIST 2>&1

            fi

            SRB2PID="$!"

        fi

    done
}

srb2ms() {
    SRVCODE=$(curl -sL "$SRB2MSURL")

    # Check connection to SRB2 Master Server.
    if [ -z "$(curl -vI "$SRB2MSURL" 2>&1 | gawk '/> Host:/ {gsub("\r","");print $NF}')" ] || [ -z "$(printf "%s\n" "$SRVCODE" | gawk 'match($0, /Players/) {print substr($0, RSTART, RLENGTH)}' | head -n1)" ]; then

        printf "$FAILURE\n%s\n\e[0m" "ERROR: Can't connect to Master Server. Try again later or check your internet connection."
        exit

    fi

    # Connecting to SRB2 servers in Master Server. Keeping colored names, players, IP, gametype, etc.
    SRVIP=$(printf "%s\n" "$SRVCODE" | gawk -F'<|>' '/copyIP/ && !/EMPTY LAND ZONE|function/ {print $3}')
    SRVNAME=$(printf "%s$(printf "%s\n" "$SRVCODE" | gawk '/"servername">/ && !/>Unreachable</ {gsub("<h1 class=\"servername\">|<span style=\"color:inherit*.\"></span>|<span style=\"color:inherit*.\">|<span style=\"color:#f3a3a3;\"></span><span style=\"color:#69e046;\"></span><span style=\"color:#69e046;\"></span><span style=\"color:#ff9736;\"></span><span style=\"color:#ffff0f;\"></span>|</h1>","") gsub("&amp;","\\&") gsub("^[ \t]+",""); print}' | gawk '{gsub("<span style=\"color:#ffff0f;\">","\\e[0;38;2;255;255;15m") gsub("<span style=\"color:#69e046;\">","\\e[0;38;2;105;224;70m") gsub("<span style=\"color:#7373ff;\">","\\e[0;38;2;115;115;255m") gsub("<span style=\"color:#ff3f3f;\">","\\e[0;38;2;255;63;63m") gsub("<span style=\"color:#ff9736;\">","\\e[0;38;2;255;151;54m") gsub("<span style=\"color:#a7a7a7;\">","\\e[0;38;2;167;167;167m") gsub("<span style=\"color:#55c8ff;\">","\\e[0;38;2;85;200;255m") gsub("<span style=\"color:#c4c4e1;\">","\\e[0;38;2;196;196;225m") gsub("<span style=\"color:#df00df;\">","\\e[0;38;2;223;0;223m") gsub("<span style=\"color:#bf7b4b;\">","\\e[0;38;2;191;123;75m") gsub("<span style=\"color:#d7bb43;\">","\\e[0;38;2;215;187;67m") gsub("<span style=\"color:#c7e494;\">","\\e[0;38;2;199;228;148m") gsub("<span style=\"color:#cf7fcf;\">","\\e[0;38;2;207;127;207m") gsub("<span style=\"color:#c599ff;\">","\\e[0;38;2;197;153;255m") gsub("<span style=\"color:#979797;\">","\\e[0;38;2;151;151;151m") gsub("<span style=\"color:#f3a3a3;\">","\\e[0;38;2;243;163;163m") gsub("</span>","\033[0m"); print}')\n")
    PLAYERS=$(printf "%s\n" "$SRVCODE" | gawk -F'<img title="|"' '/img title="[0-9]*\/[0-9]*"/ {print $4}')
    GAMETYPE=$(printf "%s\n" "$SRVCODE" | gawk -F'<div class="gametype">|</div>' '/<div class="gametype">.*.<\/div>/ {gsub("&amp;","\\&"); print $2}')
    MAP=$(printf "%s\n" "$SRVCODE" | gawk -F'<strong>|</strong>' '/Playing on/ && !/EMPTY LAND ZONE/ {print $2}')
    arrayname=$(printf "%s\n\033[1;34mRefresh\033[0m" "$(gawk -v left="$SRVNAME" -v leftcenter="$SRVIP" -v center="$PLAYERS" -v rightcenter="$GAMETYPE" -v right="$MAP" 'BEGIN{
split(left,l,/\n/)
split(leftcenter,lc,/\n/)
split(center,c,/\n/)
split(rightcenter,rc,/\n/)
split(right,r,/\n/)
for (i = 1; i in l; i++) {print l[i] " - " "\033[2mIP: "lc[i]"\033[0m" " - " "\033[37mPlayers: "c[i]"\033[0m" " - " "\033[37mGametype: "rc[i]"\033[0m" " - " "\033[37mMap: "r[i]"\033[0m"}}')")
    array=$(printf "%s\nRefresh" "$(gawk -v left="$SRVIP" -v right="$GAMETYPE" 'BEGIN{
split(left,l,/\n/)
split(right,r,/\n/)
for (i = 1; i in l; i++) {print l[i],r[i]}}' | gawk '!/ $/ {print $1}')")
    count=$(printf "%s\n" "$array" | wc -l)
    n=""
    while true; do

        clear
        printf "$MESSAGE\n%s\n\e[0m" "Please choose server by typing number and then pressing enter. Press enter or ctrl+c to quit."
        printf "%s\n" "$arrayname" | gawk '{print NR")", $0}'
        printf "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            OPTURL=$(printf "%s\n" "$array" | gawk 'NR=='"${n}"'')

            if [ "$OPTURL" = "Refresh" ]; then

                exec "$0"

            else

                IFS=";"
                SRB2=$(printf "%s\n" "$SRB2" | gawk '{gsub(" /",";/") gsub(" -",";-");print}')
                printf "$MESSAGE\n%s\n\e[0m" "Connecting to server $OPTURL."
                sleep 1

                if [ "$SRB2" = "flatpak" ]; then

                    flatpak run org.srb2.SRB2 -connect $OPTURL 2>&1 || checksrb2

                else

                    $SRB2 -connect $OPTURL 2>&1 || checksrb2

                fi

            fi
            break

        else

            printf "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

srb2kartms() {
    SRVCODE=$(curl -sL "$SRB2KARTMSURL")

    # Check connection to SRB2 Master Server.
    if [ -z "$(curl -vI "$SRB2KARTMSURL" 2>&1 | gawk '/> Host:/ {gsub("\r","");print $NF}')" ] || [ -z "$(printf "%s\n" "$SRVCODE" | gawk 'match($0, /Players/) {print substr($0, RSTART, RLENGTH)}' | head -n1)" ]; then

        printf "$FAILURE\n%s\n\e[0m" "ERROR: Can't connect to Master Server. Try again later or check your internet connection."
        exit

    fi

    # Connecting to SRB2Kart servers in Master Server. Keeping colored names, players, IP, gametype, etc.
    SRVUNREACHIP=$(printf "%s\n" "$SRVCODE" | gawk '/Unreachable \(*.*\)/ {gsub("\\(|\\)|</td>","");printf "%s|", $2}' | gawk '{gsub(/\|$/,"");print}')
    SRVIP=$(printf "%s\n" "$SRVCODE" | gawk -F'href="srb2kart://ip/|">🔗</a>' '/srb2kart:/ {print $2}' | gawk '!/'$SRVUNREACHIP'/ {print}')
    SRVNAME=$(printf "%s$(printf "%s\n" "$SRVCODE" | gawk '/<h1 class="servername">/ && !/<h1 class="servername">Unreachable<\/h1>/ {gsub("<h1 class=\"servername\">|</h1>|<span style=\"color:inherit\">|<span style=\"color:inherit;\">","") gsub("&#x27;","\\47") gsub("&amp;","\\&") gsub("^[ \t]+","");print}' | gawk '{gsub("<span style=\"color:#ffff0f;\">","\\e[0;38;2;255;255;15m") gsub("<span style=\"color:#69e046;\">","\\e[0;38;2;105;224;70m") gsub("<span style=\"color:#7373ff;\">","\\e[0;38;2;115;115;255m") gsub("<span style=\"color:#ff3f3f;\">","\\e[0;38;2;255;63;63m") gsub("<span style=\"color:#ff9736;\">","\\e[0;38;2;255;151;54m") gsub("<span style=\"color:#a7a7a7;\">","\\e[0;38;2;167;167;167m") gsub("<span style=\"color:#55c8ff;\">","\\e[0;38;2;85;200;255m") gsub("<span style=\"color:#c4c4e1;\">","\\e[0;38;2;196;196;225m") gsub("<span style=\"color:#df00df;\">","\\e[0;38;2;223;0;223m") gsub("<span style=\"color:#bf7b4b;\">","\\e[0;38;2;191;123;75m") gsub("<span style=\"color:#d7bb43;\">","\\e[0;38;2;215;187;67m") gsub("<span style=\"color:#c7e494;\">","\\e[0;38;2;199;228;148m") gsub("<span style=\"color:#cf7fcf;\">","\\e[0;38;2;207;127;207m") gsub("<span style=\"color:#c599ff;\">","\\e[0;38;2;197;153;255m") gsub("<span style=\"color:#979797;\">","\\e[0;38;2;151;151;151m") gsub("<span style=\"color:#f3a3a3;\">","\\e[0;38;2;243;163;163m") gsub("<span style=\"color:#ffc7a7;\">","\\e[0;38;2;255;199;167m") gsub("</span>","\033[0m"); print}')\n")
    PLAYERS=$(printf "%s\n" "$SRVCODE" | gawk '/- [0-9]* \// && !/\(None\)/ {getline t;print $3,$4,$5,t}' | gawk NF'{(gsub(" |players<br>|-","") gsub("/"," / "));print}')
    GAMETYPE=$(printf "%s\n" "$SRVCODE" | gawk '/- [0-9]* \// && !/\(None\)/ {print $1}')
    KARTSPEED=$(printf "%s\n" "$SRVCODE" | gawk '/- [0-9]* \// && !/\(None\)/ {gsub("\\(|\\)","");print $2}')
    arrayname=$(printf "%s\n\033[1;34mRefresh\033[0m" "$(gawk -v left="$SRVNAME" -v leftcenter="$SRVIP" -v center="$PLAYERS" -v rightcenter="$GAMETYPE" -v right="$KARTSPEED" 'BEGIN{
split(left,l,/\n/)
split(leftcenter,lc,/\n/)
split(center,c,/\n/)
split(rightcenter,rc,/\n/)
split(right,r,/\n/)
for (i = 1; i in l; i++) {print l[i] " - " "\033[2mIP: "lc[i]"\033[0m" " - " "\033[37mPlayers: "c[i]"\033[0m" " - " "\033[0m\033[37mGametype: "rc[i]"\033[0m" " - " "\033[37mKartspeed: "r[i]"\033[0m"}}')")
    array=$(printf "%s\nRefresh" "$(gawk -v left="$SRVIP" -v right="$SRVNAME" 'BEGIN{
split(left,l,/\n/)
split(right,r,/\n/)
for (i = 1; i in l; i++) {print l[i],r[i]}}' | gawk '!/-$/ {print $1}')")
    count=$(printf "%s\n" "$array" | wc -l)
    n=""
    while true; do

        clear
        printf "$MESSAGE\n%s\n\e[0m" "Please choose server by typing number and then pressing enter. Press enter or ctrl+c to quit."
        printf "%s\n" "$arrayname" | gawk '{print NR")", $0}'
        printf "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            OPTURL=$(printf "%s\n" "$array" | gawk 'NR=='"${n}"'')

            if [ "$OPTURL" = "Refresh" ]; then

                exec "$0" --kart

            else

                IFS=";"
                SRB2KART=$(printf "%s\n" "$SRB2KART" | gawk '{gsub(" /",";/") gsub(" -",";-");print}')
                printf "$MESSAGE\n%s\n\e[0m" "Connecting to server $OPTURL."
                sleep 1

                if [ "$SRB2KART" = "flatpak" ]; then

                    flatpak run org.srb2.SRB2Kart -connect $OPTURL 2>&1 || checksrb2kart

                else

                    $SRB2KART -connect $OPTURL 2>&1 || checksrb2kart

                fi

            fi
            break

        else

            printf "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

usage() {
    printf "%s\n" "
CLI for server related tools of SRB2/SRB2Kart.

Usage: srb2srv [OPTION] <parameter>
  OPTIONS:
     -h, --help                             Show this help text.
     -c, --checkport                        Check if SRB2/SRB2Kart server is reachable.
     -d, --dedicated      <addon-path>      Start dedicated SRB2 server.
     -dk, --dedicatedkart <addon-path>      Start dedicated SRB2Kart server.
     -i, --ip             <server-ip>       Join SRB2 server from IP.
     -ik, --ipkart        <server-ip>       Join SRB2Kart server from IP.
     -k, --kart                             Go to SRB2Kart Master Server.
     -p, --port           <port-number>     Specify the local UDP port to use. Works with -c, -d, -dk, -s and -sk options.
     -s, --server         <addon-path>      Start SRB2 server and play.
     -sk, --serverkart    <addon-path>      Start SRB2Kart server and play.

  EXAMPLES:
     1. Go to SRB2 Master Server and connect to selected server from list:
            srb2srv

     2. Go to SRB2Kart Master Server and connect to selected server from list:
            srb2srv --kart

     3. Check if port 5030 for SRB2/SRB2Kart server is opened (default port to be checked is 5029 without --port option):
            srb2srv --checkport --port 5030

     4. Run SRB2 server and add path to addon or directory of addons (default port to hosting server is 5029):
            srb2srv --server \"\$HOME/addon.pk3\"

     5. Run SRB2Kart dedicated server with port 5030 and add path to addon or directory of addons (default port to hosting server is 5029 without --port option):
            srb2srv --dedicatedkart \"\$HOME/addon.pk3\" --port 5030

     6. Join SRB2 server:
            srb2srv --ip 123.84.116.123:5029

  NOTES:
     - Exporting SRB2/SRB2Kart executable file (\"lsdl2srb2\", \"lsdlsrb2\", \"srb2\", \"srb2win.exe\", \"srb2win64.exe\", \"srb2.exe\", \"Sonic Robo Blast 2\", \"lsdl2srb2kart\", \"srb2kart\", \"srb2kart.exe\", \"Sonic Robo Blast 2 Kart\") path or \"flatpak\" (for installed Flatpaks, Linux only) in \"SRB2\" or \"SRB2KART\" environment variable to shell configuration file (for example in \".bashrc\" or \".bash_profile\") is required for script to work.
     Here are a few examples:
       SRB2
         1. Linux:
            - export SRB2=\"\$HOME/Games/SRB2/lsdl2srb2\",
            - export SRB2=\"\$HOME/Games/SRB2/lsdlsrb2\",
            - export SRB2=\"\$HOME/Games/SRB2/srb2\",
            - export SRB2=\"/usr/bin/srb2\",
            - export SRB2=\"flatpak\".

         2. Windows:
            - export SRB2=\"\$HOME/Games/SRB2/srb2win.exe\",
            - export SRB2=\"\$HOME/Games/SRB2/srb2win64.exe\",
            - export SRB2=\"\$HOME/Games/SRB2/srb2.exe\",
            - export SRB2=\"C:\Users\user\Games\SRB2\srb2win.exe\".

         3. macOS:
            - export SRB2=\"/Applications/Sonic Robo Blast 2.app/Contents/MacOS/Sonic Robo Blast 2\".

       SRB2Kart
         1. Linux:
            - export SRB2KART=\"\$HOME/Games/SRB2Kart/lsdl2srb2kart\",
            - export SRB2KART=\"\$HOME/Games/SRB2Kart/srb2kart\",
            - export SRB2KART=\"/usr/bin/srb2kart\",
            - export SRB2KART=\"flatpak\".

         2. Windows:
            - export SRB2KART=\"\$HOME/Games/SRB2Kart/srb2kart.exe\",
            - export SRB2KART=\"C:\Users\user\Games\SRB2Kart\srb2kart.exe\".

         3. macOS:
            - export SRB2KART=\"/Applications/Sonic Robo Blast 2 Kart.app/Contents/MacOS/Sonic Robo Blast 2 Kart\".

     - This script does not set port forwarding and open port in system's firewall for you. You need to do this manually on your router and system. For more information read the guide in: https://www.jameds.org/portforward.
     - To automate inputting in script for hosting server, do for example 'echo \"1\n3\" | srb2srv -d [path to directory of addons for dedicated server]', which means it will make input to list dedicated server in Custom room on Master Server.
     - Full path to game's main configuration file can be set with SRB2MAINCFG variable to shell configuration file, otherwise script assumes default file, if SRB2MAINCFG is not set.
     - There is also additional SRB2CFG variable of other configuration file, which can temporary override settings of set SRB2MAINCFG.

"

    exit
}

# Checking --port argument, if it is entered or it is in range of 0-65535. Defaulting to 5029, if does not meat requirements.
PORTARG=$(printf "%s\n" "$*" | gawk 'match($0, /-p [0-9][0-9]*|--port [0-9][0-9]*/) {print substr($0, RSTART, RLENGTH)}')
if [ -n "$PORTARG" ]; then

    if ([ "$(printf "%s\n" "$PORTARG" | gawk 'match($0, /-p/) {print substr($0, RSTART, RLENGTH)}')" = "-p" ] || [ "$(printf "%s\n" "$PORTARG" | gawk 'match($0, /--port/) {print substr($0, RSTART, RLENGTH)}')" = "--port" ]) && [ "$(printf "%s\n" "$PORTARG" | gawk 'match($0, /[0-9][0-9]*/) {print substr($0, RSTART, RLENGTH)}')" -ge 0 ] && [ "$(printf "%s\n" "$PORTARG" | gawk 'match($0, /[0-9][0-9]*/) {print substr($0, RSTART, RLENGTH)}')" -le 65535 ]; then

        PORT=$(printf "%s\n" "$PORTARG" | gawk 'match($0, /[0-9][0-9]*/) {print substr($0, RSTART, RLENGTH)}')

    fi

else

    PORT="5029"

fi

case "$3" in

    -d | --dedicated)

        dedicated "$@"

        ;;

    -dk | --dedicatedkart)

        dedicatedkart "$@"

        ;;

    -s | --server)

        server "$@"

        ;;

    -sk | --serverkart)

        serverkart "$@"

        ;;

esac

case "$1" in

    -h | --help)

        usage

        ;;

    "")

        srb2ms

        ;;

    -c | --checkport)

        checkport

        ;;

    -d | --dedicated)

        dedicated "$@"

        ;;

    -dk | --dedicatedkart)

        dedicatedkart "$@"

        ;;

    -i | --ip)

        ip "$@"

        ;;

    -ik | --ipkart)

        ipkart "$@"

        ;;

    -k | --kart)

        srb2kartms

        ;;

    -s | --server)

        server "$@"

        ;;

    -sk | --serverkart)

        serverkart "$@"

        ;;

esac
